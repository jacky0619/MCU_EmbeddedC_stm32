
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003138  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080032e8  080032e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003390  08003390  0002085c  2**0
                  CONTENTS
  4 .ARM          00000000  08003390  08003390  0002085c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003390  08003390  0002085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000085c  20000000  0800339c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000085c  08003bf8  0002085c  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200009ac  08003bf8  000209ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002085c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f5d  00000000  00000000  00020886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c8f  00000000  00000000  000247e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000308  00000000  00000000  00025478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000290  00000000  00000000  00025780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000034b8  00000000  00000000  00025a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003739  00000000  00000000  00028ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b961  00000000  00000000  0002c601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00037f62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001768  00000000  00000000  00037fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000085c 	.word	0x2000085c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080032d0 	.word	0x080032d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000860 	.word	0x20000860
 80001ec:	080032d0 	.word	0x080032d0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <ds1307_init>:
I2C_Handle_t g_ds1307I2cHandle;

//returns 1 : CH = 1 ; init failed
//returns 0 : CH = 0 ; init success
uint8_t ds1307_init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0

	//1. init the i2c pins
	ds1307_i2c_pin_config();
 80002a6:	f000 f90f 	bl	80004c8 <ds1307_i2c_pin_config>

	//2. initialize the i2c peripheral
	ds1307_i2c_config();
 80002aa:	f000 f949 	bl	8000540 <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80002ae:	2101      	movs	r1, #1
 80002b0:	4809      	ldr	r0, [pc, #36]	; (80002d8 <ds1307_init+0x38>)
 80002b2:	f000 fe36 	bl	8000f22 <I2C_PeripheralControl>

	//4. Make clock halt = 0;
	ds1307_write(0x00,DS1307_ADDR_SEC);
 80002b6:	2100      	movs	r1, #0
 80002b8:	2000      	movs	r0, #0
 80002ba:	f000 f957 	bl	800056c <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 f970 	bl	80005a4 <ds1307_read>
 80002c4:	4603      	mov	r3, r0
 80002c6:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7 ) & 0x1);
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	09db      	lsrs	r3, r3, #7
 80002cc:	b2db      	uxtb	r3, r3

}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40005400 	.word	0x40005400

080002dc <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f979 	bl	80005e0 <binary_to_bcd>
 80002ee:	4603      	mov	r3, r0
 80002f0:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 80002f2:	7bbb      	ldrb	r3, [r7, #14]
 80002f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002f8:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 80002fa:	7bbb      	ldrb	r3, [r7, #14]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f934 	bl	800056c <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	785b      	ldrb	r3, [r3, #1]
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f969 	bl	80005e0 <binary_to_bcd>
 800030e:	4603      	mov	r3, r0
 8000310:	2101      	movs	r1, #1
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f92a 	bl	800056c <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	789b      	ldrb	r3, [r3, #2]
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f95f 	bl	80005e0 <binary_to_bcd>
 8000322:	4603      	mov	r3, r0
 8000324:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	78db      	ldrb	r3, [r3, #3]
 800032a:	2b02      	cmp	r3, #2
 800032c:	d104      	bne.n	8000338 <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 800032e:	7bfb      	ldrb	r3, [r7, #15]
 8000330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	e011      	b.n	800035c <ds1307_set_current_time+0x80>
	}else{
		hrs |= (1 << 6);
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800033e:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	78db      	ldrb	r3, [r3, #3]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d104      	bne.n	8000352 <ds1307_set_current_time+0x76>
 8000348:	7bfb      	ldrb	r3, [r7, #15]
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	b2db      	uxtb	r3, r3
 8000350:	e003      	b.n	800035a <ds1307_set_current_time+0x7e>
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	f023 0320 	bic.w	r3, r3, #32
 8000358:	b2db      	uxtb	r3, r3
 800035a:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs,DS1307_ADDR_HRS);
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	2102      	movs	r1, #2
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f903 	bl	800056c <ds1307_write>

}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	b082      	sub	sp, #8
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f930 	bl	80005e0 <binary_to_bcd>
 8000380:	4603      	mov	r3, r0
 8000382:	2104      	movs	r1, #4
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f8f1 	bl	800056c <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	785b      	ldrb	r3, [r3, #1]
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f926 	bl	80005e0 <binary_to_bcd>
 8000394:	4603      	mov	r3, r0
 8000396:	2105      	movs	r1, #5
 8000398:	4618      	mov	r0, r3
 800039a:	f000 f8e7 	bl	800056c <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	789b      	ldrb	r3, [r3, #2]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f91c 	bl	80005e0 <binary_to_bcd>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2106      	movs	r1, #6
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 f8dd 	bl	800056c <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	78db      	ldrb	r3, [r3, #3]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f912 	bl	80005e0 <binary_to_bcd>
 80003bc:	4603      	mov	r3, r0
 80003be:	2103      	movs	r1, #3
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f8d3 	bl	800056c <ds1307_write>

}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b084      	sub	sp, #16
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]

	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 80003d6:	2000      	movs	r0, #0
 80003d8:	f000 f8e4 	bl	80005a4 <ds1307_read>
 80003dc:	4603      	mov	r3, r0
 80003de:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 80003e0:	7bbb      	ldrb	r3, [r7, #14]
 80003e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003e6:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 80003e8:	7bbb      	ldrb	r3, [r7, #14]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f924 	bl	8000638 <bcd_to_binary>
 80003f0:	4603      	mov	r3, r0
 80003f2:	461a      	mov	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80003f8:	2001      	movs	r0, #1
 80003fa:	f000 f8d3 	bl	80005a4 <ds1307_read>
 80003fe:	4603      	mov	r3, r0
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f919 	bl	8000638 <bcd_to_binary>
 8000406:	4603      	mov	r3, r0
 8000408:	461a      	mov	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 800040e:	2002      	movs	r0, #2
 8000410:	f000 f8c8 	bl	80005a4 <ds1307_read>
 8000414:	4603      	mov	r3, r0
 8000416:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)){
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800041e:	2b00      	cmp	r3, #0
 8000420:	d00f      	beq.n	8000442 <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	f003 0320 	and.w	r3, r3, #32
 8000428:	2b00      	cmp	r3, #0
 800042a:	bf14      	ite	ne
 800042c:	2301      	movne	r3, #1
 800042e:	2300      	moveq	r3, #0
 8000430:	b2db      	uxtb	r3, r3
 8000432:	461a      	mov	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 8000438:	7bfb      	ldrb	r3, [r7, #15]
 800043a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	e002      	b.n	8000448 <ds1307_get_current_time+0x7a>
	}else{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2202      	movs	r2, #2
 8000446:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f8f4 	bl	8000638 <bcd_to_binary>
 8000450:	4603      	mov	r3, r0
 8000452:	461a      	mov	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	709a      	strb	r2, [r3, #2]
}
 8000458:	bf00      	nop
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	rtc_date->day =  bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000468:	2003      	movs	r0, #3
 800046a:	f000 f89b 	bl	80005a4 <ds1307_read>
 800046e:	4603      	mov	r3, r0
 8000470:	4618      	mov	r0, r3
 8000472:	f000 f8e1 	bl	8000638 <bcd_to_binary>
 8000476:	4603      	mov	r3, r0
 8000478:	461a      	mov	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 800047e:	2004      	movs	r0, #4
 8000480:	f000 f890 	bl	80005a4 <ds1307_read>
 8000484:	4603      	mov	r3, r0
 8000486:	4618      	mov	r0, r3
 8000488:	f000 f8d6 	bl	8000638 <bcd_to_binary>
 800048c:	4603      	mov	r3, r0
 800048e:	461a      	mov	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000494:	2005      	movs	r0, #5
 8000496:	f000 f885 	bl	80005a4 <ds1307_read>
 800049a:	4603      	mov	r3, r0
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f8cb 	bl	8000638 <bcd_to_binary>
 80004a2:	4603      	mov	r3, r0
 80004a4:	461a      	mov	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 80004aa:	2006      	movs	r0, #6
 80004ac:	f000 f87a 	bl	80005a4 <ds1307_read>
 80004b0:	4603      	mov	r3, r0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f8c0 	bl	8000638 <bcd_to_binary>
 80004b8:	4603      	mov	r3, r0
 80004ba:	461a      	mov	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	709a      	strb	r2, [r3, #2]

}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	220c      	movs	r2, #12
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 f9f8 	bl	80018cc <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 80004dc:	463b      	mov	r3, r7
 80004de:	220c      	movs	r2, #12
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 f9f2 	bl	80018cc <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <ds1307_i2c_pin_config+0x74>)
 80004ea:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80004ec:	2304      	movs	r3, #4
 80004ee:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80004f0:	2302      	movs	r3, #2
 80004f2:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 80004f4:	2307      	movs	r3, #7
 80004f6:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80004f8:	2301      	movs	r3, #1
 80004fa:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80004fc:	2301      	movs	r3, #1
 80004fe:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000500:	2302      	movs	r3, #2
 8000502:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	4618      	mov	r0, r3
 800050a:	f000 facb 	bl	8000aa4 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <ds1307_i2c_pin_config+0x74>)
 8000510:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000512:	2304      	movs	r3, #4
 8000514:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000516:	2302      	movs	r3, #2
 8000518:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 800051a:	2306      	movs	r3, #6
 800051c:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800051e:	2301      	movs	r3, #1
 8000520:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000522:	2301      	movs	r3, #1
 8000524:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000526:	2302      	movs	r3, #2
 8000528:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 800052a:	463b      	mov	r3, r7
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fab9 	bl	8000aa4 <GPIO_Init>

}
 8000532:	bf00      	nop
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40020400 	.word	0x40020400

08000540 <ds1307_i2c_config>:


static void ds1307_i2c_config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <ds1307_i2c_config+0x20>)
 8000546:	4a07      	ldr	r2, [pc, #28]	; (8000564 <ds1307_i2c_config+0x24>)
 8000548:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <ds1307_i2c_config+0x20>)
 800054c:	2201      	movs	r2, #1
 800054e:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <ds1307_i2c_config+0x20>)
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <ds1307_i2c_config+0x28>)
 8000554:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 8000556:	4802      	ldr	r0, [pc, #8]	; (8000560 <ds1307_i2c_config+0x20>)
 8000558:	f000 fd34 	bl	8000fc4 <I2C_Init>
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000974 	.word	0x20000974
 8000564:	40005400 	.word	0x40005400
 8000568:	000186a0 	.word	0x000186a0

0800056c <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
 8000572:	4603      	mov	r3, r0
 8000574:	460a      	mov	r2, r1
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000584:	f107 010c 	add.w	r1, r7, #12
 8000588:	2300      	movs	r3, #0
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2368      	movs	r3, #104	; 0x68
 800058e:	2202      	movs	r2, #2
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <ds1307_write+0x34>)
 8000592:	f000 fddc 	bl	800114e <I2C_MasterSendData>
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000974 	.word	0x20000974

080005a4 <ds1307_read>:



static uint8_t ds1307_read(uint8_t reg_addr)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 80005ae:	1df9      	adds	r1, r7, #7
 80005b0:	2300      	movs	r3, #0
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2368      	movs	r3, #104	; 0x68
 80005b6:	2201      	movs	r2, #1
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <ds1307_read+0x38>)
 80005ba:	f000 fdc8 	bl	800114e <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 80005be:	f107 010f 	add.w	r1, r7, #15
 80005c2:	2300      	movs	r3, #0
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2368      	movs	r3, #104	; 0x68
 80005c8:	2201      	movs	r2, #1
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <ds1307_read+0x38>)
 80005cc:	f000 fe22 	bl	8001214 <I2C_MasterReceiveData>

    return data;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000974 	.word	0x20000974

080005e0 <binary_to_bcd>:



static uint8_t binary_to_bcd(uint8_t value)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b09      	cmp	r3, #9
 80005f2:	d918      	bls.n	8000626 <binary_to_bcd+0x46>
	{
		m = value /10;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <binary_to_bcd+0x54>)
 80005f8:	fba2 2303 	umull	r2, r3, r2, r3
 80005fc:	08db      	lsrs	r3, r3, #3
 80005fe:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000600:	79fa      	ldrb	r2, [r7, #7]
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <binary_to_bcd+0x54>)
 8000604:	fba3 1302 	umull	r1, r3, r3, r2
 8000608:	08d9      	lsrs	r1, r3, #3
 800060a:	460b      	mov	r3, r1
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	b25a      	sxtb	r2, r3
 800061c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000620:	4313      	orrs	r3, r2
 8000622:	b25b      	sxtb	r3, r3
 8000624:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000626:	7bfb      	ldrb	r3, [r7, #15]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	cccccccd 	.word	0xcccccccd

08000638 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	091b      	lsrs	r3, r3, #4
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	0092      	lsls	r2, r2, #2
 800064c:	4413      	add	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 030f 	and.w	r3, r3, #15
 8000658:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 800065a:	7bfa      	ldrb	r2, [r7, #15]
 800065c:	7bbb      	ldrb	r3, [r7, #14]
 800065e:	4413      	add	r3, r2
 8000660:	b2db      	uxtb	r3, r3
}
 8000662:	4618      	mov	r0, r3
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);

void lcd_send_command(uint8_t cmd)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	/* RS=0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	480c      	ldr	r0, [pc, #48]	; (80006ac <lcd_send_command+0x40>)
 800067c:	f000 fbae 	bl	8000ddc <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2101      	movs	r1, #1
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <lcd_send_command+0x40>)
 8000686:	f000 fba9 	bl	8000ddc <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	091b      	lsrs	r3, r3, #4
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f8cd 	bl	8000830 <write_4_bits>
	write_4_bits(cmd & 0x0F);
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f003 030f 	and.w	r3, r3, #15
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f8c6 	bl	8000830 <write_4_bits>

}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40020c00 	.word	0x40020c00

080006b0 <lcd_print_char>:
 *Here we used 4 bit parallel data transmission.
 *First higher nibble of the data will be sent on to the data lines D4,D5,D6,D7
 *Then lower nibble of the data will be set on to the data lines D4,D5,D6,D7
 */
void lcd_print_char(uint8_t data)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	/* RS=1 for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2100      	movs	r1, #0
 80006be:	480c      	ldr	r0, [pc, #48]	; (80006f0 <lcd_print_char+0x40>)
 80006c0:	f000 fb8c 	bl	8000ddc <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2101      	movs	r1, #1
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <lcd_print_char+0x40>)
 80006ca:	f000 fb87 	bl	8000ddc <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);  /*Higher nibble*/
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	091b      	lsrs	r3, r3, #4
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f8ab 	bl	8000830 <write_4_bits>
	write_4_bits(data & 0x0F); /*Lower nibble*/
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f8a4 	bl	8000830 <write_4_bits>

}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40020c00 	.word	0x40020c00

080006f4 <lcd_print_string>:


void lcd_print_string(char *message)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

      do
      {
          lcd_print_char((uint8_t)*message++);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffd3 	bl	80006b0 <lcd_print_char>
      }
      while (*message != '\0');
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1f4      	bne.n	80006fc <lcd_print_string+0x8>

}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <lcd_init>:


void lcd_init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

	//1. Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 8000722:	4b42      	ldr	r3, [pc, #264]	; (800082c <lcd_init+0x110>)
 8000724:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000726:	2301      	movs	r3, #1
 8000728:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 800072a:	2300      	movs	r3, #0
 800072c:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800072e:	2300      	movs	r3, #0
 8000730:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000732:	2300      	movs	r3, #0
 8000734:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000736:	2302      	movs	r3, #2
 8000738:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f9b1 	bl	8000aa4 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000742:	2301      	movs	r3, #1
 8000744:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f9ab 	bl	8000aa4 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 800074e:	2302      	movs	r3, #2
 8000750:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f9a5 	bl	8000aa4 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 800075a:	2303      	movs	r3, #3
 800075c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f99f 	bl	8000aa4 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000766:	2304      	movs	r3, #4
 8000768:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f999 	bl	8000aa4 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000772:	2305      	movs	r3, #5
 8000774:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f993 	bl	8000aa4 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 800077e:	2306      	movs	r3, #6
 8000780:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f98d 	bl	8000aa4 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	4827      	ldr	r0, [pc, #156]	; (800082c <lcd_init+0x110>)
 8000790:	f000 fb24 	bl	8000ddc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2101      	movs	r1, #1
 8000798:	4824      	ldr	r0, [pc, #144]	; (800082c <lcd_init+0x110>)
 800079a:	f000 fb1f 	bl	8000ddc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2102      	movs	r1, #2
 80007a2:	4822      	ldr	r0, [pc, #136]	; (800082c <lcd_init+0x110>)
 80007a4:	f000 fb1a 	bl	8000ddc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2103      	movs	r1, #3
 80007ac:	481f      	ldr	r0, [pc, #124]	; (800082c <lcd_init+0x110>)
 80007ae:	f000 fb15 	bl	8000ddc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2104      	movs	r1, #4
 80007b6:	481d      	ldr	r0, [pc, #116]	; (800082c <lcd_init+0x110>)
 80007b8:	f000 fb10 	bl	8000ddc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2105      	movs	r1, #5
 80007c0:	481a      	ldr	r0, [pc, #104]	; (800082c <lcd_init+0x110>)
 80007c2:	f000 fb0b 	bl	8000ddc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2106      	movs	r1, #6
 80007ca:	4818      	ldr	r0, [pc, #96]	; (800082c <lcd_init+0x110>)
 80007cc:	f000 fb06 	bl	8000ddc <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization

	mdelay(40);
 80007d0:	2028      	movs	r0, #40	; 0x28
 80007d2:	f000 f8b7 	bl	8000944 <mdelay>

	/*RS = 0 , For LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	4814      	ldr	r0, [pc, #80]	; (800082c <lcd_init+0x110>)
 80007dc:	f000 fafe 	bl	8000ddc <GPIO_WriteToOutputPin>

	/* RnW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2101      	movs	r1, #1
 80007e4:	4811      	ldr	r0, [pc, #68]	; (800082c <lcd_init+0x110>)
 80007e6:	f000 faf9 	bl	8000ddc <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 80007ea:	2003      	movs	r0, #3
 80007ec:	f000 f820 	bl	8000830 <write_4_bits>

	mdelay(5);
 80007f0:	2005      	movs	r0, #5
 80007f2:	f000 f8a7 	bl	8000944 <mdelay>

	write_4_bits(0x3);
 80007f6:	2003      	movs	r0, #3
 80007f8:	f000 f81a 	bl	8000830 <write_4_bits>

	udelay(150);
 80007fc:	2096      	movs	r0, #150	; 0x96
 80007fe:	f000 f8b9 	bl	8000974 <udelay>

	write_4_bits(0x3);
 8000802:	2003      	movs	r0, #3
 8000804:	f000 f814 	bl	8000830 <write_4_bits>
	write_4_bits(0x2);
 8000808:	2002      	movs	r0, #2
 800080a:	f000 f811 	bl	8000830 <write_4_bits>

	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 800080e:	2028      	movs	r0, #40	; 0x28
 8000810:	f7ff ff2c 	bl	800066c <lcd_send_command>

	//disply ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 8000814:	200e      	movs	r0, #14
 8000816:	f7ff ff29 	bl	800066c <lcd_send_command>

	lcd_display_clear();
 800081a:	f000 f841 	bl	80008a0 <lcd_display_clear>

	//entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 800081e:	2006      	movs	r0, #6
 8000820:	f7ff ff24 	bl	800066c <lcd_send_command>



}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40020c00 	.word	0x40020c00

08000830 <write_4_bits>:

/* writes 4 bits of data/command on to D4,D5,D6,D7 lines */
static void write_4_bits(uint8_t value)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	461a      	mov	r2, r3
 8000844:	2103      	movs	r1, #3
 8000846:	4815      	ldr	r0, [pc, #84]	; (800089c <write_4_bits+0x6c>)
 8000848:	f000 fac8 	bl	8000ddc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	085b      	lsrs	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	b2db      	uxtb	r3, r3
 8000858:	461a      	mov	r2, r3
 800085a:	2104      	movs	r1, #4
 800085c:	480f      	ldr	r0, [pc, #60]	; (800089c <write_4_bits+0x6c>)
 800085e:	f000 fabd 	bl	8000ddc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	089b      	lsrs	r3, r3, #2
 8000866:	b2db      	uxtb	r3, r3
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	b2db      	uxtb	r3, r3
 800086e:	461a      	mov	r2, r3
 8000870:	2105      	movs	r1, #5
 8000872:	480a      	ldr	r0, [pc, #40]	; (800089c <write_4_bits+0x6c>)
 8000874:	f000 fab2 	bl	8000ddc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
 8000884:	461a      	mov	r2, r3
 8000886:	2106      	movs	r1, #6
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <write_4_bits+0x6c>)
 800088a:	f000 faa7 	bl	8000ddc <GPIO_WriteToOutputPin>

	lcd_enable();
 800088e:	f000 f843 	bl	8000918 <lcd_enable>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020c00 	.word	0x40020c00

080008a0 <lcd_display_clear>:

void lcd_display_clear(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff fee1 	bl	800066c <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * display clear command execution wait time is around 2ms
	 */

	mdelay(2);
 80008aa:	2002      	movs	r0, #2
 80008ac:	f000 f84a 	bl	8000944 <mdelay>
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <lcd_display_return_home>:


/*Cursor returns to home position */
void lcd_display_return_home(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 80008b8:	2002      	movs	r0, #2
 80008ba:	f7ff fed7 	bl	800066c <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * return home command execution wait time is around 2ms
	 */
	mdelay(2);
 80008be:	2002      	movs	r0, #2
 80008c0:	f000 f840 	bl	8000944 <mdelay>
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <lcd_set_cursor>:
  *   Set Lcd to a specified location given by row and column information
  *   Row Number (1 to 2)
  *   Column Number (1 to 16) Assuming a 2 X 16 characters display
  */
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	460a      	mov	r2, r1
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	4613      	mov	r3, r2
 80008d6:	71bb      	strb	r3, [r7, #6]
  column--;
 80008d8:	79bb      	ldrb	r3, [r7, #6]
 80008da:	3b01      	subs	r3, #1
 80008dc:	71bb      	strb	r3, [r7, #6]
  switch (row)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d002      	beq.n	80008ea <lcd_set_cursor+0x22>
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d009      	beq.n	80008fc <lcd_set_cursor+0x34>
    case 2:
      /* Set cursor to 2nd row address and add index*/
        lcd_send_command((column |= 0xC0));
      break;
    default:
      break;
 80008e8:	e011      	b.n	800090e <lcd_set_cursor+0x46>
      lcd_send_command((column |= 0x80));
 80008ea:	79bb      	ldrb	r3, [r7, #6]
 80008ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f0:	71bb      	strb	r3, [r7, #6]
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff feb9 	bl	800066c <lcd_send_command>
      break;
 80008fa:	e008      	b.n	800090e <lcd_set_cursor+0x46>
        lcd_send_command((column |= 0xC0));
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000902:	71bb      	strb	r3, [r7, #6]
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff feb0 	bl	800066c <lcd_send_command>
      break;
 800090c:	bf00      	nop
  }
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <lcd_enable>:



static void lcd_enable(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2102      	movs	r1, #2
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <lcd_enable+0x28>)
 8000922:	f000 fa5b 	bl	8000ddc <GPIO_WriteToOutputPin>
	udelay(10);
 8000926:	200a      	movs	r0, #10
 8000928:	f000 f824 	bl	8000974 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2102      	movs	r1, #2
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <lcd_enable+0x28>)
 8000932:	f000 fa53 	bl	8000ddc <GPIO_WriteToOutputPin>
	udelay(100);/* execution time > 37 micro seconds */
 8000936:	2064      	movs	r0, #100	; 0x64
 8000938:	f000 f81c 	bl	8000974 <udelay>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40020c00 	.word	0x40020c00

08000944 <mdelay>:


static void mdelay(uint32_t cnt)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e002      	b.n	8000958 <mdelay+0x14>
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	3301      	adds	r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800095e:	fb02 f303 	mul.w	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d3f4      	bcc.n	8000952 <mdelay+0xe>
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <udelay>:

static void udelay(uint32_t cnt)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e002      	b.n	8000988 <udelay+0x14>
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3301      	adds	r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	429a      	cmp	r2, r3
 800098e:	d3f8      	bcc.n	8000982 <udelay+0xe>
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d161      	bne.n	8000a72 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a32      	ldr	r2, [pc, #200]	; (8000a7c <GPIO_PeriClockControl+0xe0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d106      	bne.n	80009c4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80009b6:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a31      	ldr	r2, [pc, #196]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 80009c2:	e056      	b.n	8000a72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a2f      	ldr	r2, [pc, #188]	; (8000a84 <GPIO_PeriClockControl+0xe8>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d106      	bne.n	80009da <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80009cc:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	4a2b      	ldr	r2, [pc, #172]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d8:	e04b      	b.n	8000a72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <GPIO_PeriClockControl+0xec>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d106      	bne.n	80009f0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80009e2:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a26      	ldr	r2, [pc, #152]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ee:	e040      	b.n	8000a72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a26      	ldr	r2, [pc, #152]	; (8000a8c <GPIO_PeriClockControl+0xf0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d106      	bne.n	8000a06 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	4a20      	ldr	r2, [pc, #128]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 80009fe:	f043 0308 	orr.w	r3, r3, #8
 8000a02:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a04:	e035      	b.n	8000a72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <GPIO_PeriClockControl+0xf4>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d106      	bne.n	8000a1c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 8000a14:	f043 0310 	orr.w	r3, r3, #16
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a1a:	e02a      	b.n	8000a72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <GPIO_PeriClockControl+0xf8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d106      	bne.n	8000a32 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 8000a2a:	f043 0320 	orr.w	r3, r3, #32
 8000a2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a30:	e01f      	b.n	8000a72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <GPIO_PeriClockControl+0xfc>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d106      	bne.n	8000a48 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 8000a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a46:	e014      	b.n	8000a72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <GPIO_PeriClockControl+0x100>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d106      	bne.n	8000a5e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 8000a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a5c:	e009      	b.n	8000a72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <GPIO_PeriClockControl+0x104>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d105      	bne.n	8000a72 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <GPIO_PeriClockControl+0xe4>)
 8000a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40021400 	.word	0x40021400
 8000a98:	40021800 	.word	0x40021800
 8000a9c:	40021c00 	.word	0x40021c00
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff70 	bl	800099c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d820      	bhi.n	8000b06 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	795b      	ldrb	r3, [r3, #5]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	791b      	ldrb	r3, [r3, #4]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	4619      	mov	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	400a      	ands	r2, r1
 8000af2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6819      	ldr	r1, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	430a      	orrs	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	e0cb      	b.n	8000c9e <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	795b      	ldrb	r3, [r3, #5]
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d117      	bne.n	8000b3e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b0e:	4b4b      	ldr	r3, [pc, #300]	; (8000c3c <GPIO_Init+0x198>)
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	7912      	ldrb	r2, [r2, #4]
 8000b16:	4611      	mov	r1, r2
 8000b18:	2201      	movs	r2, #1
 8000b1a:	408a      	lsls	r2, r1
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4a47      	ldr	r2, [pc, #284]	; (8000c3c <GPIO_Init+0x198>)
 8000b20:	430b      	orrs	r3, r1
 8000b22:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b24:	4b45      	ldr	r3, [pc, #276]	; (8000c3c <GPIO_Init+0x198>)
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	7912      	ldrb	r2, [r2, #4]
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	2201      	movs	r2, #1
 8000b30:	408a      	lsls	r2, r1
 8000b32:	43d2      	mvns	r2, r2
 8000b34:	4611      	mov	r1, r2
 8000b36:	4a41      	ldr	r2, [pc, #260]	; (8000c3c <GPIO_Init+0x198>)
 8000b38:	400b      	ands	r3, r1
 8000b3a:	6093      	str	r3, [r2, #8]
 8000b3c:	e035      	b.n	8000baa <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	795b      	ldrb	r3, [r3, #5]
 8000b42:	2b05      	cmp	r3, #5
 8000b44:	d117      	bne.n	8000b76 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b46:	4b3d      	ldr	r3, [pc, #244]	; (8000c3c <GPIO_Init+0x198>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	7912      	ldrb	r2, [r2, #4]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	2201      	movs	r2, #1
 8000b52:	408a      	lsls	r2, r1
 8000b54:	4611      	mov	r1, r2
 8000b56:	4a39      	ldr	r2, [pc, #228]	; (8000c3c <GPIO_Init+0x198>)
 8000b58:	430b      	orrs	r3, r1
 8000b5a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <GPIO_Init+0x198>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	7912      	ldrb	r2, [r2, #4]
 8000b64:	4611      	mov	r1, r2
 8000b66:	2201      	movs	r2, #1
 8000b68:	408a      	lsls	r2, r1
 8000b6a:	43d2      	mvns	r2, r2
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4a33      	ldr	r2, [pc, #204]	; (8000c3c <GPIO_Init+0x198>)
 8000b70:	400b      	ands	r3, r1
 8000b72:	60d3      	str	r3, [r2, #12]
 8000b74:	e019      	b.n	8000baa <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	795b      	ldrb	r3, [r3, #5]
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d115      	bne.n	8000baa <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <GPIO_Init+0x198>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	7912      	ldrb	r2, [r2, #4]
 8000b86:	4611      	mov	r1, r2
 8000b88:	2201      	movs	r2, #1
 8000b8a:	408a      	lsls	r2, r1
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4a2b      	ldr	r2, [pc, #172]	; (8000c3c <GPIO_Init+0x198>)
 8000b90:	430b      	orrs	r3, r1
 8000b92:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <GPIO_Init+0x198>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	7912      	ldrb	r2, [r2, #4]
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	408a      	lsls	r2, r1
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4a25      	ldr	r2, [pc, #148]	; (8000c3c <GPIO_Init+0x198>)
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	791b      	ldrb	r3, [r3, #4]
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	791b      	ldrb	r3, [r3, #4]
 8000bb6:	f003 0303 	and.w	r3, r3, #3
 8000bba:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <GPIO_Init+0x19c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d04e      	beq.n	8000c64 <GPIO_Init+0x1c0>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <GPIO_Init+0x1a0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d032      	beq.n	8000c36 <GPIO_Init+0x192>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <GPIO_Init+0x1a4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d02b      	beq.n	8000c32 <GPIO_Init+0x18e>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <GPIO_Init+0x1a8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d024      	beq.n	8000c2e <GPIO_Init+0x18a>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <GPIO_Init+0x1ac>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d01d      	beq.n	8000c2a <GPIO_Init+0x186>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <GPIO_Init+0x1b0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d016      	beq.n	8000c26 <GPIO_Init+0x182>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a16      	ldr	r2, [pc, #88]	; (8000c58 <GPIO_Init+0x1b4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d00f      	beq.n	8000c22 <GPIO_Init+0x17e>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a15      	ldr	r2, [pc, #84]	; (8000c5c <GPIO_Init+0x1b8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d008      	beq.n	8000c1e <GPIO_Init+0x17a>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <GPIO_Init+0x1bc>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d101      	bne.n	8000c1a <GPIO_Init+0x176>
 8000c16:	2308      	movs	r3, #8
 8000c18:	e025      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e023      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c1e:	2307      	movs	r3, #7
 8000c20:	e021      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c22:	2306      	movs	r3, #6
 8000c24:	e01f      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c26:	2305      	movs	r3, #5
 8000c28:	e01d      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	e01b      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e019      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c32:	2302      	movs	r3, #2
 8000c34:	e017      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e015      	b.n	8000c66 <GPIO_Init+0x1c2>
 8000c3a:	bf00      	nop
 8000c3c:	40013c00 	.word	0x40013c00
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40021400 	.word	0x40021400
 8000c58:	40021800 	.word	0x40021800
 8000c5c:	40021c00 	.word	0x40021c00
 8000c60:	40022000 	.word	0x40022000
 8000c64:	2300      	movs	r3, #0
 8000c66:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000c68:	4b59      	ldr	r3, [pc, #356]	; (8000dd0 <GPIO_Init+0x32c>)
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6c:	4a58      	ldr	r2, [pc, #352]	; (8000dd0 <GPIO_Init+0x32c>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c72:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000c74:	7c7a      	ldrb	r2, [r7, #17]
 8000c76:	7cbb      	ldrb	r3, [r7, #18]
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	fa02 f103 	lsl.w	r1, r2, r3
 8000c7e:	4a55      	ldr	r2, [pc, #340]	; (8000dd4 <GPIO_Init+0x330>)
 8000c80:	7cfb      	ldrb	r3, [r7, #19]
 8000c82:	3302      	adds	r3, #2
 8000c84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000c88:	4b53      	ldr	r3, [pc, #332]	; (8000dd8 <GPIO_Init+0x334>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	7912      	ldrb	r2, [r2, #4]
 8000c90:	4611      	mov	r1, r2
 8000c92:	2201      	movs	r2, #1
 8000c94:	408a      	lsls	r2, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	4a4f      	ldr	r2, [pc, #316]	; (8000dd8 <GPIO_Init+0x334>)
 8000c9a:	430b      	orrs	r3, r1
 8000c9c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	799b      	ldrb	r3, [r3, #6]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	791b      	ldrb	r3, [r3, #4]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	400a      	ands	r2, r1
 8000ccc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6899      	ldr	r1, [r3, #8]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	79db      	ldrb	r3, [r3, #7]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	791b      	ldrb	r3, [r3, #4]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	791b      	ldrb	r3, [r3, #4]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2103      	movs	r1, #3
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	68d9      	ldr	r1, [r3, #12]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7a1b      	ldrb	r3, [r3, #8]
 8000d22:	461a      	mov	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	791b      	ldrb	r3, [r3, #4]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	791b      	ldrb	r3, [r3, #4]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	4619      	mov	r1, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	400a      	ands	r2, r1
 8000d48:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6859      	ldr	r1, [r3, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	795b      	ldrb	r3, [r3, #5]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d131      	bne.n	8000dc6 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	791b      	ldrb	r3, [r3, #4]
 8000d66:	08db      	lsrs	r3, r3, #3
 8000d68:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	791b      	ldrb	r3, [r3, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	7c3a      	ldrb	r2, [r7, #16]
 8000d7a:	3208      	adds	r2, #8
 8000d7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	220f      	movs	r2, #15
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	7c3a      	ldrb	r2, [r7, #16]
 8000d94:	4001      	ands	r1, r0
 8000d96:	3208      	adds	r2, #8
 8000d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	7c3a      	ldrb	r2, [r7, #16]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7a5b      	ldrb	r3, [r3, #9]
 8000dac:	461a      	mov	r2, r3
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	7c3a      	ldrb	r2, [r7, #16]
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40013800 	.word	0x40013800
 8000dd8:	40013c00 	.word	0x40013c00

08000ddc <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
 8000de8:	4613      	mov	r3, r2
 8000dea:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000dec:	78bb      	ldrb	r3, [r7, #2]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d109      	bne.n	8000e06 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	78fa      	ldrb	r2, [r7, #3]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8000e04:	e009      	b.n	8000e1a <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	78fa      	ldrb	r2, [r7, #3]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e12:	43d2      	mvns	r2, r2
 8000e14:	401a      	ands	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	615a      	str	r2, [r3, #20]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	f023 0301 	bic.w	r3, r3, #1
 8000e5a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000e5c:	78fa      	ldrb	r2, [r7, #3]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	611a      	str	r2, [r3, #16]
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000e86:	78fa      	ldrb	r2, [r7, #3]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	611a      	str	r2, [r3, #16]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d01f      	beq.n	8000eec <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7f1b      	ldrb	r3, [r3, #28]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d112      	bne.n	8000eda <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d11f      	bne.n	8000efc <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fa38 	bl	8001338 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8000ed8:	e010      	b.n	8000efc <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	60fb      	str	r3, [r7, #12]
}
 8000eea:	e007      	b.n	8000efc <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	60fb      	str	r3, [r7, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d106      	bne.n	8000f42 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f043 0201 	orr.w	r2, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000f40:	e005      	b.n	8000f4e <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f023 0201 	bic.w	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d11f      	bne.n	8000faa <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <I2C_PeriClockControl+0x5c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d106      	bne.n	8000f80 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <I2C_PeriClockControl+0x60>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <I2C_PeriClockControl+0x60>)
 8000f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 8000f7e:	e014      	b.n	8000faa <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <I2C_PeriClockControl+0x64>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d106      	bne.n	8000f96 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <I2C_PeriClockControl+0x60>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <I2C_PeriClockControl+0x60>)
 8000f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f94:	e009      	b.n	8000faa <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <I2C_PeriClockControl+0x68>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d105      	bne.n	8000faa <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <I2C_PeriClockControl+0x60>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <I2C_PeriClockControl+0x60>)
 8000fa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40005800 	.word	0x40005800
 8000fc0:	40005c00 	.word	0x40005c00

08000fc4 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ffbe 	bl	8000f58 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7a5b      	ldrb	r3, [r3, #9]
 8000fe0:	029b      	lsls	r3, r3, #10
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000ff6:	f000 f9bb 	bl	8001370 <RCC_GetPCLK1Value>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a47      	ldr	r2, [pc, #284]	; (800111c <I2C_Init+0x158>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0c9b      	lsrs	r3, r3, #18
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001014:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7a1b      	ldrb	r3, [r3, #8]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	461a      	mov	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4a36      	ldr	r2, [pc, #216]	; (8001120 <I2C_Init+0x15c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d80f      	bhi.n	800106a <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800104a:	f000 f991 	bl	8001370 <RCC_GetPCLK1Value>
 800104e:	4602      	mov	r2, r0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 800105c:	897b      	ldrh	r3, [r7, #10]
 800105e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	e02d      	b.n	80010c6 <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001070:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7a9b      	ldrb	r3, [r3, #10]
 8001076:	039b      	lsls	r3, r3, #14
 8001078:	461a      	mov	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7a9b      	ldrb	r3, [r3, #10]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10b      	bne.n	80010a0 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8001088:	f000 f972 	bl	8001370 <RCC_GetPCLK1Value>
 800108c:	4601      	mov	r1, r0
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	fbb1 f3f3 	udiv	r3, r1, r3
 800109c:	817b      	strh	r3, [r7, #10]
 800109e:	e00c      	b.n	80010ba <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80010a0:	f000 f966 	bl	8001370 <RCC_GetPCLK1Value>
 80010a4:	4601      	mov	r1, r0
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	009a      	lsls	r2, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b8:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 80010ba:	897b      	ldrh	r3, [r7, #10]
 80010bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <I2C_Init+0x15c>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d809      	bhi.n	80010ec <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 80010d8:	f000 f94a 	bl	8001370 <RCC_GetPCLK1Value>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <I2C_Init+0x158>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	0c9b      	lsrs	r3, r3, #18
 80010e6:	3301      	adds	r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e00d      	b.n	8001108 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 80010ec:	f000 f940 	bl	8001370 <RCC_GetPCLK1Value>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	0a5b      	lsrs	r3, r3, #9
 80010fc:	4a09      	ldr	r2, [pc, #36]	; (8001124 <I2C_Init+0x160>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	09db      	lsrs	r3, r3, #7
 8001104:	3301      	adds	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001112:	621a      	str	r2, [r3, #32]

}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	431bde83 	.word	0x431bde83
 8001120:	000186a0 	.word	0x000186a0
 8001124:	00044b83 	.word	0x00044b83

08001128 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	4013      	ands	r3, r2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr

0800114e <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fe5f 	bl	8000e24 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8001166:	bf00      	nop
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffda 	bl	8001128 <I2C_GetFlagStatus>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f6      	beq.n	8001168 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	78fa      	ldrb	r2, [r7, #3]
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fe5d 	bl	8000e42 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8001188:	bf00      	nop
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2102      	movs	r1, #2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffc9 	bl	8001128 <I2C_GetFlagStatus>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f6      	beq.n	800118a <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff fe7a 	bl	8000e96 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 80011a2:	e014      	b.n	80011ce <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 80011a4:	bf00      	nop
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ffbb 	bl	8001128 <I2C_GetFlagStatus>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f6      	beq.n	80011a6 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3301      	adds	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
		Len--;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1e7      	bne.n	80011a4 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 80011d4:	bf00      	nop
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ffa3 	bl	8001128 <I2C_GetFlagStatus>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f6      	beq.n	80011d6 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 80011e8:	bf00      	nop
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2104      	movs	r1, #4
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff99 	bl	8001128 <I2C_GetFlagStatus>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f6      	beq.n	80011ea <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 80011fc:	7e3b      	ldrb	r3, [r7, #24]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d104      	bne.n	800120c <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe7c 	bl	8000f04 <I2C_GenerateStopCondition>

}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	4611      	mov	r1, r2
 8001220:	461a      	mov	r2, r3
 8001222:	460b      	mov	r3, r1
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	4613      	mov	r3, r2
 8001228:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fdf8 	bl	8000e24 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8001234:	bf00      	nop
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff73 	bl	8001128 <I2C_GetFlagStatus>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f6      	beq.n	8001236 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	79ba      	ldrb	r2, [r7, #6]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe0b 	bl	8000e6c <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8001256:	bf00      	nop
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2102      	movs	r1, #2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff62 	bl	8001128 <I2C_GetFlagStatus>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f6      	beq.n	8001258 <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d121      	bne.n	80012b4 <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f85e 	bl	8001338 <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f7ff fe0a 	bl	8000e96 <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8001282:	bf00      	nop
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2140      	movs	r1, #64	; 0x40
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff4c 	bl	8001128 <I2C_GetFlagStatus>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f6      	beq.n	8001284 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8001296:	f897 3020 	ldrb.w	r3, [r7, #32]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d104      	bne.n	80012a8 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fe2e 	bl	8000f04 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d930      	bls.n	800131c <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff fdeb 	bl	8000e96 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e027      	b.n	8001316 <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 80012c6:	bf00      	nop
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff2a 	bl	8001128 <I2C_GetFlagStatus>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f6      	beq.n	80012c8 <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d10e      	bne.n	80012fe <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f826 	bl	8001338 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 80012ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d104      	bne.n	80012fe <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fe03 	bl	8000f04 <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	3301      	adds	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3b01      	subs	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1d4      	bne.n	80012c6 <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	7a5b      	ldrb	r3, [r3, #9]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d105      	bne.n	8001330 <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2101      	movs	r1, #1
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f804 	bl	8001338 <I2C_ManageAcking>
	}

}
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d106      	bne.n	8001358 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8001356:	e005      	b.n	8001364 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
	...

08001370 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <RCC_GetPCLK1Value+0x9c>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8001384:	7a7b      	ldrb	r3, [r7, #9]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <RCC_GetPCLK1Value+0xa0>)
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	e00b      	b.n	80013a8 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d102      	bne.n	800139c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <RCC_GetPCLK1Value+0xa4>)
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	e005      	b.n	80013a8 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 800139c:	7a7b      	ldrb	r3, [r7, #9]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d102      	bne.n	80013a8 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80013a2:	f000 f83d 	bl	8001420 <RCC_GetPLLOutputClock>
 80013a6:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <RCC_GetPCLK1Value+0x9c>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80013b6:	7a3b      	ldrb	r3, [r7, #8]
 80013b8:	2b07      	cmp	r3, #7
 80013ba:	d802      	bhi.n	80013c2 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	72fb      	strb	r3, [r7, #11]
 80013c0:	e005      	b.n	80013ce <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80013c2:	7a3b      	ldrb	r3, [r7, #8]
 80013c4:	3b08      	subs	r3, #8
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <RCC_GetPCLK1Value+0xa8>)
 80013c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013cc:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <RCC_GetPCLK1Value+0x9c>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	0a9b      	lsrs	r3, r3, #10
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80013dc:	7a3b      	ldrb	r3, [r7, #8]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d802      	bhi.n	80013e8 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	72bb      	strb	r3, [r7, #10]
 80013e6:	e004      	b.n	80013f2 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 80013e8:	7a3b      	ldrb	r3, [r7, #8]
 80013ea:	3b04      	subs	r3, #4
 80013ec:	4a0b      	ldr	r2, [pc, #44]	; (800141c <RCC_GetPCLK1Value+0xac>)
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80013f2:	7afb      	ldrb	r3, [r7, #11]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80013fa:	7abb      	ldrb	r3, [r7, #10]
 80013fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001400:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001402:	687b      	ldr	r3, [r7, #4]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	00f42400 	.word	0x00f42400
 8001414:	007a1200 	.word	0x007a1200
 8001418:	20000000 	.word	0x20000000
 800141c:	20000010 	.word	0x20000010

08001420 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

	return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
	...

08001430 <init_systick_timer>:
/* Enable this macro if you want to test RTC on LCD */
#define PRINT_LCD //////


void init_systick_timer(uint32_t tick_hz)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <init_systick_timer+0x5c>)
 800143a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <init_systick_timer+0x60>)
 800143e:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <init_systick_timer+0x64>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	fbb2 f3f3 	udiv	r3, r2, r3
 8001448:	3b01      	subs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	431a      	orrs	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f043 0202 	orr.w	r2, r3, #2
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f043 0204 	orr.w	r2, r3, #4
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f043 0201 	orr.w	r2, r3, #1
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	601a      	str	r2, [r3, #0]

}
 8001482:	bf00      	nop
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	e000e014 	.word	0xe000e014
 8001490:	e000e010 	.word	0xe000e010
 8001494:	00f42400 	.word	0x00f42400

08001498 <get_day_of_week>:


char* get_day_of_week(uint8_t i)
{
 8001498:	b4b0      	push	{r4, r5, r7}
 800149a:	b08b      	sub	sp, #44	; 0x2c
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <get_day_of_week+0x38>)
 80014a4:	f107 040c 	add.w	r4, r7, #12
 80014a8:	461d      	mov	r5, r3
 80014aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014c0:	4413      	add	r3, r2
 80014c2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	372c      	adds	r7, #44	; 0x2c
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bcb0      	pop	{r4, r5, r7}
 80014ce:	4770      	bx	lr
 80014d0:	0800332c 	.word	0x0800332c

080014d4 <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b09      	cmp	r3, #9
 80014e4:	d809      	bhi.n	80014fa <number_to_string+0x26>
		buf[0] = '0';
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2230      	movs	r2, #48	; 0x30
 80014ea:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	79fa      	ldrb	r2, [r7, #7]
 80014f2:	3230      	adds	r2, #48	; 0x30
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 80014f8:	e01f      	b.n	800153a <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b09      	cmp	r3, #9
 80014fe:	d91c      	bls.n	800153a <number_to_string+0x66>
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b62      	cmp	r3, #98	; 0x62
 8001504:	d819      	bhi.n	800153a <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <number_to_string+0x70>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	3330      	adds	r3, #48	; 0x30
 8001514:	b2da      	uxtb	r2, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 800151a:	79fa      	ldrb	r2, [r7, #7]
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <number_to_string+0x70>)
 800151e:	fba3 1302 	umull	r1, r3, r3, r2
 8001522:	08d9      	lsrs	r1, r3, #3
 8001524:	460b      	mov	r3, r1
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	b2da      	uxtb	r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	3230      	adds	r2, #48	; 0x30
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	cccccccd 	.word	0xcccccccd

08001548 <time_to_string>:



//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <time_to_string+0x48>)
 8001552:	223a      	movs	r2, #58	; 0x3a
 8001554:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <time_to_string+0x48>)
 8001558:	223a      	movs	r2, #58	; 0x3a
 800155a:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	789b      	ldrb	r3, [r3, #2]
 8001560:	490b      	ldr	r1, [pc, #44]	; (8001590 <time_to_string+0x48>)
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ffb6 	bl	80014d4 <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	785b      	ldrb	r3, [r3, #1]
 800156c:	4909      	ldr	r1, [pc, #36]	; (8001594 <time_to_string+0x4c>)
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ffb0 	bl	80014d4 <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4907      	ldr	r1, [pc, #28]	; (8001598 <time_to_string+0x50>)
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ffaa 	bl	80014d4 <number_to_string>

	buf[8] = '\0';
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <time_to_string+0x48>)
 8001582:	2200      	movs	r2, #0
 8001584:	721a      	strb	r2, [r3, #8]

	return buf;
 8001586:	4b02      	ldr	r3, [pc, #8]	; (8001590 <time_to_string+0x48>)

}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000878 	.word	0x20000878
 8001594:	2000087b 	.word	0x2000087b
 8001598:	2000087e 	.word	0x2000087e

0800159c <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <date_to_string+0x48>)
 80015a6:	222f      	movs	r2, #47	; 0x2f
 80015a8:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <date_to_string+0x48>)
 80015ac:	222f      	movs	r2, #47	; 0x2f
 80015ae:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	490b      	ldr	r1, [pc, #44]	; (80015e4 <date_to_string+0x48>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff8c 	bl	80014d4 <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	785b      	ldrb	r3, [r3, #1]
 80015c0:	4909      	ldr	r1, [pc, #36]	; (80015e8 <date_to_string+0x4c>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff86 	bl	80014d4 <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	789b      	ldrb	r3, [r3, #2]
 80015cc:	4907      	ldr	r1, [pc, #28]	; (80015ec <date_to_string+0x50>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff80 	bl	80014d4 <number_to_string>

	buf[8]= '\0';
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <date_to_string+0x48>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	721a      	strb	r2, [r3, #8]

	return buf;
 80015da:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <date_to_string+0x48>)

}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000884 	.word	0x20000884
 80015e8:	20000887 	.word	0x20000887
 80015ec:	2000088a 	.word	0x2000088a

080015f0 <mdelay>:

static void mdelay(uint32_t cnt)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e002      	b.n	8001604 <mdelay+0x14>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3301      	adds	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d3f4      	bcc.n	80015fe <mdelay+0xe>
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <main>:

extern void initialise_monitor_handles(void);//////

int main(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
	/* semihosting test*/
	initialise_monitor_handles();
 8001626:	f001 fdd9 	bl	80031dc <initialise_monitor_handles>
	RTC_date_t current_date;

#ifndef PRINT_LCD
	printf("RTC test\n");
#else
	lcd_init();
 800162a:	f7ff f877 	bl	800071c <lcd_init>

	lcd_print_string("RTC Test...");
 800162e:	4833      	ldr	r0, [pc, #204]	; (80016fc <main+0xdc>)
 8001630:	f7ff f860 	bl	80006f4 <lcd_print_string>


	mdelay(2000);
 8001634:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001638:	f7ff ffda 	bl	80015f0 <mdelay>

	lcd_display_clear();
 800163c:	f7ff f930 	bl	80008a0 <lcd_display_clear>
	lcd_display_return_home();
 8001640:	f7ff f938 	bl	80008b4 <lcd_display_return_home>
#endif

	if(ds1307_init()){
 8001644:	f7fe fe2c 	bl	80002a0 <ds1307_init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <main+0x36>
		printf("RTC init has failed\n");
 800164e:	482c      	ldr	r0, [pc, #176]	; (8001700 <main+0xe0>)
 8001650:	f000 f98a 	bl	8001968 <puts>
		while(1);
 8001654:	e7fe      	b.n	8001654 <main+0x34>
	}

	init_systick_timer(1);
 8001656:	2001      	movs	r0, #1
 8001658:	f7ff feea 	bl	8001430 <init_systick_timer>

	current_date.day = SUNDAY;
 800165c:	2301      	movs	r3, #1
 800165e:	71fb      	strb	r3, [r7, #7]
	current_date.date = 10;
 8001660:	230a      	movs	r3, #10
 8001662:	713b      	strb	r3, [r7, #4]
	current_date.month = 9;
 8001664:	2309      	movs	r3, #9
 8001666:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 8001668:	2315      	movs	r3, #21
 800166a:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 23;
 800166c:	2317      	movs	r3, #23
 800166e:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 58;
 8001670:	233a      	movs	r3, #58	; 0x3a
 8001672:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 8001674:	231e      	movs	r3, #30
 8001676:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8001678:	2301      	movs	r3, #1
 800167a:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fe75 	bl	800036e <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fe27 	bl	80002dc <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fe9b 	bl	80003ce <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fee0 	bl	8000460 <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 80016a0:	7afb      	ldrb	r3, [r7, #11]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d013      	beq.n	80016ce <main+0xae>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80016a6:	7afb      	ldrb	r3, [r7, #11]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <main+0x90>
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <main+0xe4>)
 80016ae:	e000      	b.n	80016b2 <main+0x92>
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <main+0xe8>)
 80016b2:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
#else
		lcd_print_string(time_to_string(&current_time));
 80016b4:	f107 0308 	add.w	r3, r7, #8
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff45 	bl	8001548 <time_to_string>
 80016be:	4603      	mov	r3, r0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff f817 	bl	80006f4 <lcd_print_string>
		lcd_print_string(am_pm);
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f7ff f814 	bl	80006f4 <lcd_print_string>
 80016cc:	e008      	b.n	80016e0 <main+0xc0>
#endif
	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
#else
		lcd_print_string(time_to_string(&current_time));
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff38 	bl	8001548 <time_to_string>
 80016d8:	4603      	mov	r3, r0
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f80a 	bl	80006f4 <lcd_print_string>
	}

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 80016e0:	2101      	movs	r1, #1
 80016e2:	2002      	movs	r0, #2
 80016e4:	f7ff f8f0 	bl	80008c8 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff56 	bl	800159c <date_to_string>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fffe 	bl	80006f4 <lcd_print_string>
#endif


	while(1);
 80016f8:	e7fe      	b.n	80016f8 <main+0xd8>
 80016fa:	bf00      	nop
 80016fc:	08003348 	.word	0x08003348
 8001700:	08003354 	.word	0x08003354
 8001704:	08003368 	.word	0x08003368
 8001708:	0800336c 	.word	0x0800336c

0800170c <SysTick_Handler>:
	return 0;
}


void SysTick_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fe59 	bl	80003ce <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 800171c:	7afb      	ldrb	r3, [r7, #11]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d017      	beq.n	8001752 <SysTick_Handler+0x46>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8001722:	7afb      	ldrb	r3, [r7, #11]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SysTick_Handler+0x20>
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <SysTick_Handler+0xa4>)
 800172a:	e000      	b.n	800172e <SysTick_Handler+0x22>
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <SysTick_Handler+0xa8>)
 800172e:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
#else
		lcd_set_cursor(1, 1);
 8001730:	2101      	movs	r1, #1
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff f8c8 	bl	80008c8 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff03 	bl	8001548 <time_to_string>
 8001742:	4603      	mov	r3, r0
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ffd5 	bl	80006f4 <lcd_print_string>
		lcd_print_string(am_pm);
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f7fe ffd2 	bl	80006f4 <lcd_print_string>
 8001750:	e00c      	b.n	800176c <SysTick_Handler+0x60>

	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
#else
		lcd_set_cursor(1, 1);
 8001752:	2101      	movs	r1, #1
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff f8b7 	bl	80008c8 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fef2 	bl	8001548 <time_to_string>
 8001764:	4603      	mov	r3, r0
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe ffc4 	bl	80006f4 <lcd_print_string>
#endif
	}

	ds1307_get_current_date(&current_date);
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fe76 	bl	8000460 <ds1307_get_current_date>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 8001774:	2101      	movs	r1, #1
 8001776:	2002      	movs	r0, #2
 8001778:	f7ff f8a6 	bl	80008c8 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff0c 	bl	800159c <date_to_string>
 8001784:	4603      	mov	r3, r0
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe ffb4 	bl	80006f4 <lcd_print_string>
	lcd_print_char('<');
 800178c:	203c      	movs	r0, #60	; 0x3c
 800178e:	f7fe ff8f 	bl	80006b0 <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fe7f 	bl	8001498 <get_day_of_week>
 800179a:	4603      	mov	r3, r0
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe ffa9 	bl	80006f4 <lcd_print_string>
	lcd_print_char('>');
 80017a2:	203e      	movs	r0, #62	; 0x3e
 80017a4:	f7fe ff84 	bl	80006b0 <lcd_print_char>
#endif


}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	08003368 	.word	0x08003368
 80017b4:	0800336c 	.word	0x0800336c

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	; (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f000 f846 	bl	8001878 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20020000 	.word	0x20020000
 8001818:	00000400 	.word	0x00000400
 800181c:	20000890 	.word	0x20000890
 8001820:	200009b0 	.word	0x200009b0

08001824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001824:	480d      	ldr	r0, [pc, #52]	; (800185c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001826:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <LoopForever+0x6>)
  ldr r1, =_edata
 800182a:	490e      	ldr	r1, [pc, #56]	; (8001864 <LoopForever+0xa>)
  ldr r2, =_sidata
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <LoopForever+0xe>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001840:	4c0b      	ldr	r4, [pc, #44]	; (8001870 <LoopForever+0x16>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800184e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001852:	f000 f817 	bl	8001884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001856:	f7ff fee3 	bl	8001620 <main>

0800185a <LoopForever>:

LoopForever:
    b LoopForever
 800185a:	e7fe      	b.n	800185a <LoopForever>
  ldr   r0, =_estack
 800185c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	2000085c 	.word	0x2000085c
  ldr r2, =_sidata
 8001868:	0800339c 	.word	0x0800339c
  ldr r2, =_sbss
 800186c:	2000085c 	.word	0x2000085c
  ldr r4, =_ebss
 8001870:	200009ac 	.word	0x200009ac

08001874 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <__errno>:
 8001878:	4b01      	ldr	r3, [pc, #4]	; (8001880 <__errno+0x8>)
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000014 	.word	0x20000014

08001884 <__libc_init_array>:
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	4d0d      	ldr	r5, [pc, #52]	; (80018bc <__libc_init_array+0x38>)
 8001888:	4c0d      	ldr	r4, [pc, #52]	; (80018c0 <__libc_init_array+0x3c>)
 800188a:	1b64      	subs	r4, r4, r5
 800188c:	10a4      	asrs	r4, r4, #2
 800188e:	2600      	movs	r6, #0
 8001890:	42a6      	cmp	r6, r4
 8001892:	d109      	bne.n	80018a8 <__libc_init_array+0x24>
 8001894:	4d0b      	ldr	r5, [pc, #44]	; (80018c4 <__libc_init_array+0x40>)
 8001896:	4c0c      	ldr	r4, [pc, #48]	; (80018c8 <__libc_init_array+0x44>)
 8001898:	f001 fd1a 	bl	80032d0 <_init>
 800189c:	1b64      	subs	r4, r4, r5
 800189e:	10a4      	asrs	r4, r4, #2
 80018a0:	2600      	movs	r6, #0
 80018a2:	42a6      	cmp	r6, r4
 80018a4:	d105      	bne.n	80018b2 <__libc_init_array+0x2e>
 80018a6:	bd70      	pop	{r4, r5, r6, pc}
 80018a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ac:	4798      	blx	r3
 80018ae:	3601      	adds	r6, #1
 80018b0:	e7ee      	b.n	8001890 <__libc_init_array+0xc>
 80018b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b6:	4798      	blx	r3
 80018b8:	3601      	adds	r6, #1
 80018ba:	e7f2      	b.n	80018a2 <__libc_init_array+0x1e>
 80018bc:	08003390 	.word	0x08003390
 80018c0:	08003390 	.word	0x08003390
 80018c4:	08003390 	.word	0x08003390
 80018c8:	08003398 	.word	0x08003398

080018cc <memset>:
 80018cc:	4402      	add	r2, r0
 80018ce:	4603      	mov	r3, r0
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d100      	bne.n	80018d6 <memset+0xa>
 80018d4:	4770      	bx	lr
 80018d6:	f803 1b01 	strb.w	r1, [r3], #1
 80018da:	e7f9      	b.n	80018d0 <memset+0x4>

080018dc <_puts_r>:
 80018dc:	b530      	push	{r4, r5, lr}
 80018de:	4605      	mov	r5, r0
 80018e0:	b089      	sub	sp, #36	; 0x24
 80018e2:	4608      	mov	r0, r1
 80018e4:	460c      	mov	r4, r1
 80018e6:	f7fe fc83 	bl	80001f0 <strlen>
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <_puts_r+0x88>)
 80018ec:	9306      	str	r3, [sp, #24]
 80018ee:	2301      	movs	r3, #1
 80018f0:	e9cd 4004 	strd	r4, r0, [sp, #16]
 80018f4:	9307      	str	r3, [sp, #28]
 80018f6:	4418      	add	r0, r3
 80018f8:	ab04      	add	r3, sp, #16
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	2302      	movs	r3, #2
 80018fe:	9302      	str	r3, [sp, #8]
 8001900:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001902:	68ac      	ldr	r4, [r5, #8]
 8001904:	9003      	str	r0, [sp, #12]
 8001906:	b913      	cbnz	r3, 800190e <_puts_r+0x32>
 8001908:	4628      	mov	r0, r5
 800190a:	f000 f88b 	bl	8001a24 <__sinit>
 800190e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001910:	07db      	lsls	r3, r3, #31
 8001912:	d405      	bmi.n	8001920 <_puts_r+0x44>
 8001914:	89a3      	ldrh	r3, [r4, #12]
 8001916:	0598      	lsls	r0, r3, #22
 8001918:	d402      	bmi.n	8001920 <_puts_r+0x44>
 800191a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800191c:	f000 fa29 	bl	8001d72 <__retarget_lock_acquire_recursive>
 8001920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001924:	0499      	lsls	r1, r3, #18
 8001926:	d406      	bmi.n	8001936 <_puts_r+0x5a>
 8001928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800192c:	81a3      	strh	r3, [r4, #12]
 800192e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001934:	6663      	str	r3, [r4, #100]	; 0x64
 8001936:	4628      	mov	r0, r5
 8001938:	aa01      	add	r2, sp, #4
 800193a:	4621      	mov	r1, r4
 800193c:	f000 f8ae 	bl	8001a9c <__sfvwrite_r>
 8001940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001942:	2800      	cmp	r0, #0
 8001944:	bf14      	ite	ne
 8001946:	f04f 35ff 	movne.w	r5, #4294967295
 800194a:	250a      	moveq	r5, #10
 800194c:	07da      	lsls	r2, r3, #31
 800194e:	d405      	bmi.n	800195c <_puts_r+0x80>
 8001950:	89a3      	ldrh	r3, [r4, #12]
 8001952:	059b      	lsls	r3, r3, #22
 8001954:	d402      	bmi.n	800195c <_puts_r+0x80>
 8001956:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001958:	f000 fa0c 	bl	8001d74 <__retarget_lock_release_recursive>
 800195c:	4628      	mov	r0, r5
 800195e:	b009      	add	sp, #36	; 0x24
 8001960:	bd30      	pop	{r4, r5, pc}
 8001962:	bf00      	nop
 8001964:	08003374 	.word	0x08003374

08001968 <puts>:
 8001968:	4b02      	ldr	r3, [pc, #8]	; (8001974 <puts+0xc>)
 800196a:	4601      	mov	r1, r0
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f7ff bfb5 	b.w	80018dc <_puts_r>
 8001972:	bf00      	nop
 8001974:	20000014 	.word	0x20000014

08001978 <register_fini>:
 8001978:	4b02      	ldr	r3, [pc, #8]	; (8001984 <register_fini+0xc>)
 800197a:	b113      	cbz	r3, 8001982 <register_fini+0xa>
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <register_fini+0x10>)
 800197e:	f000 b805 	b.w	800198c <atexit>
 8001982:	4770      	bx	lr
 8001984:	00000000 	.word	0x00000000
 8001988:	08001a75 	.word	0x08001a75

0800198c <atexit>:
 800198c:	2300      	movs	r3, #0
 800198e:	4601      	mov	r1, r0
 8001990:	461a      	mov	r2, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f000 bed4 	b.w	8002740 <__register_exitproc>

08001998 <std>:
 8001998:	2300      	movs	r3, #0
 800199a:	b510      	push	{r4, lr}
 800199c:	4604      	mov	r4, r0
 800199e:	e9c0 3300 	strd	r3, r3, [r0]
 80019a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019a6:	6083      	str	r3, [r0, #8]
 80019a8:	8181      	strh	r1, [r0, #12]
 80019aa:	6643      	str	r3, [r0, #100]	; 0x64
 80019ac:	81c2      	strh	r2, [r0, #14]
 80019ae:	6183      	str	r3, [r0, #24]
 80019b0:	4619      	mov	r1, r3
 80019b2:	2208      	movs	r2, #8
 80019b4:	305c      	adds	r0, #92	; 0x5c
 80019b6:	f7ff ff89 	bl	80018cc <memset>
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <std+0x40>)
 80019bc:	6223      	str	r3, [r4, #32]
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <std+0x44>)
 80019c0:	6263      	str	r3, [r4, #36]	; 0x24
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <std+0x48>)
 80019c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <std+0x4c>)
 80019c8:	61e4      	str	r4, [r4, #28]
 80019ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80019cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80019d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019d4:	f000 b9cb 	b.w	8001d6e <__retarget_lock_init_recursive>
 80019d8:	080025cd 	.word	0x080025cd
 80019dc:	080025ef 	.word	0x080025ef
 80019e0:	08002627 	.word	0x08002627
 80019e4:	0800264b 	.word	0x0800264b

080019e8 <_cleanup_r>:
 80019e8:	4901      	ldr	r1, [pc, #4]	; (80019f0 <_cleanup_r+0x8>)
 80019ea:	f000 b9a1 	b.w	8001d30 <_fwalk_reent>
 80019ee:	bf00      	nop
 80019f0:	080027e1 	.word	0x080027e1

080019f4 <__sfp_lock_acquire>:
 80019f4:	4801      	ldr	r0, [pc, #4]	; (80019fc <__sfp_lock_acquire+0x8>)
 80019f6:	f000 b9bc 	b.w	8001d72 <__retarget_lock_acquire_recursive>
 80019fa:	bf00      	nop
 80019fc:	200009a4 	.word	0x200009a4

08001a00 <__sfp_lock_release>:
 8001a00:	4801      	ldr	r0, [pc, #4]	; (8001a08 <__sfp_lock_release+0x8>)
 8001a02:	f000 b9b7 	b.w	8001d74 <__retarget_lock_release_recursive>
 8001a06:	bf00      	nop
 8001a08:	200009a4 	.word	0x200009a4

08001a0c <__sinit_lock_acquire>:
 8001a0c:	4801      	ldr	r0, [pc, #4]	; (8001a14 <__sinit_lock_acquire+0x8>)
 8001a0e:	f000 b9b0 	b.w	8001d72 <__retarget_lock_acquire_recursive>
 8001a12:	bf00      	nop
 8001a14:	2000099f 	.word	0x2000099f

08001a18 <__sinit_lock_release>:
 8001a18:	4801      	ldr	r0, [pc, #4]	; (8001a20 <__sinit_lock_release+0x8>)
 8001a1a:	f000 b9ab 	b.w	8001d74 <__retarget_lock_release_recursive>
 8001a1e:	bf00      	nop
 8001a20:	2000099f 	.word	0x2000099f

08001a24 <__sinit>:
 8001a24:	b510      	push	{r4, lr}
 8001a26:	4604      	mov	r4, r0
 8001a28:	f7ff fff0 	bl	8001a0c <__sinit_lock_acquire>
 8001a2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a2e:	b11a      	cbz	r2, 8001a38 <__sinit+0x14>
 8001a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a34:	f7ff bff0 	b.w	8001a18 <__sinit_lock_release>
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <__sinit+0x4c>)
 8001a3a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8001a42:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8001a46:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8001a4a:	6860      	ldr	r0, [r4, #4]
 8001a4c:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8001a50:	2104      	movs	r1, #4
 8001a52:	f7ff ffa1 	bl	8001998 <std>
 8001a56:	68a0      	ldr	r0, [r4, #8]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2109      	movs	r1, #9
 8001a5c:	f7ff ff9c 	bl	8001998 <std>
 8001a60:	68e0      	ldr	r0, [r4, #12]
 8001a62:	2202      	movs	r2, #2
 8001a64:	2112      	movs	r1, #18
 8001a66:	f7ff ff97 	bl	8001998 <std>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8001a6e:	e7df      	b.n	8001a30 <__sinit+0xc>
 8001a70:	080019e9 	.word	0x080019e9

08001a74 <__libc_fini_array>:
 8001a74:	b538      	push	{r3, r4, r5, lr}
 8001a76:	4d07      	ldr	r5, [pc, #28]	; (8001a94 <__libc_fini_array+0x20>)
 8001a78:	4c07      	ldr	r4, [pc, #28]	; (8001a98 <__libc_fini_array+0x24>)
 8001a7a:	1b64      	subs	r4, r4, r5
 8001a7c:	10a4      	asrs	r4, r4, #2
 8001a7e:	b91c      	cbnz	r4, 8001a88 <__libc_fini_array+0x14>
 8001a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a84:	f001 bc2a 	b.w	80032dc <_fini>
 8001a88:	3c01      	subs	r4, #1
 8001a8a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8001a8e:	4798      	blx	r3
 8001a90:	e7f5      	b.n	8001a7e <__libc_fini_array+0xa>
 8001a92:	bf00      	nop
 8001a94:	08003398 	.word	0x08003398
 8001a98:	0800339c 	.word	0x0800339c

08001a9c <__sfvwrite_r>:
 8001a9c:	6893      	ldr	r3, [r2, #8]
 8001a9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aa2:	4606      	mov	r6, r0
 8001aa4:	460c      	mov	r4, r1
 8001aa6:	4690      	mov	r8, r2
 8001aa8:	b91b      	cbnz	r3, 8001ab2 <__sfvwrite_r+0x16>
 8001aaa:	2000      	movs	r0, #0
 8001aac:	b003      	add	sp, #12
 8001aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ab2:	898b      	ldrh	r3, [r1, #12]
 8001ab4:	0718      	lsls	r0, r3, #28
 8001ab6:	d550      	bpl.n	8001b5a <__sfvwrite_r+0xbe>
 8001ab8:	690b      	ldr	r3, [r1, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d04d      	beq.n	8001b5a <__sfvwrite_r+0xbe>
 8001abe:	89a3      	ldrh	r3, [r4, #12]
 8001ac0:	f8d8 7000 	ldr.w	r7, [r8]
 8001ac4:	f013 0902 	ands.w	r9, r3, #2
 8001ac8:	d16c      	bne.n	8001ba4 <__sfvwrite_r+0x108>
 8001aca:	f013 0301 	ands.w	r3, r3, #1
 8001ace:	f000 809c 	beq.w	8001c0a <__sfvwrite_r+0x16e>
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	46ca      	mov	sl, r9
 8001ad6:	46cb      	mov	fp, r9
 8001ad8:	f1bb 0f00 	cmp.w	fp, #0
 8001adc:	f000 8103 	beq.w	8001ce6 <__sfvwrite_r+0x24a>
 8001ae0:	b950      	cbnz	r0, 8001af8 <__sfvwrite_r+0x5c>
 8001ae2:	465a      	mov	r2, fp
 8001ae4:	210a      	movs	r1, #10
 8001ae6:	4650      	mov	r0, sl
 8001ae8:	f7fe fb8a 	bl	8000200 <memchr>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	f000 80ff 	beq.w	8001cf0 <__sfvwrite_r+0x254>
 8001af2:	3001      	adds	r0, #1
 8001af4:	eba0 090a 	sub.w	r9, r0, sl
 8001af8:	6820      	ldr	r0, [r4, #0]
 8001afa:	6921      	ldr	r1, [r4, #16]
 8001afc:	6963      	ldr	r3, [r4, #20]
 8001afe:	45d9      	cmp	r9, fp
 8001b00:	464a      	mov	r2, r9
 8001b02:	bf28      	it	cs
 8001b04:	465a      	movcs	r2, fp
 8001b06:	4288      	cmp	r0, r1
 8001b08:	f240 80f5 	bls.w	8001cf6 <__sfvwrite_r+0x25a>
 8001b0c:	68a5      	ldr	r5, [r4, #8]
 8001b0e:	441d      	add	r5, r3
 8001b10:	42aa      	cmp	r2, r5
 8001b12:	f340 80f0 	ble.w	8001cf6 <__sfvwrite_r+0x25a>
 8001b16:	4651      	mov	r1, sl
 8001b18:	462a      	mov	r2, r5
 8001b1a:	f000 fb7d 	bl	8002218 <memmove>
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	442b      	add	r3, r5
 8001b22:	6023      	str	r3, [r4, #0]
 8001b24:	4621      	mov	r1, r4
 8001b26:	4630      	mov	r0, r6
 8001b28:	f000 ff40 	bl	80029ac <_fflush_r>
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	d167      	bne.n	8001c00 <__sfvwrite_r+0x164>
 8001b30:	ebb9 0905 	subs.w	r9, r9, r5
 8001b34:	f040 80f7 	bne.w	8001d26 <__sfvwrite_r+0x28a>
 8001b38:	4621      	mov	r1, r4
 8001b3a:	4630      	mov	r0, r6
 8001b3c:	f000 ff36 	bl	80029ac <_fflush_r>
 8001b40:	2800      	cmp	r0, #0
 8001b42:	d15d      	bne.n	8001c00 <__sfvwrite_r+0x164>
 8001b44:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8001b48:	44aa      	add	sl, r5
 8001b4a:	ebab 0b05 	sub.w	fp, fp, r5
 8001b4e:	1b55      	subs	r5, r2, r5
 8001b50:	f8c8 5008 	str.w	r5, [r8, #8]
 8001b54:	2d00      	cmp	r5, #0
 8001b56:	d1bf      	bne.n	8001ad8 <__sfvwrite_r+0x3c>
 8001b58:	e7a7      	b.n	8001aaa <__sfvwrite_r+0xe>
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	f000 fd97 	bl	8002690 <__swsetup_r>
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d0ab      	beq.n	8001abe <__sfvwrite_r+0x22>
 8001b66:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6a:	e79f      	b.n	8001aac <__sfvwrite_r+0x10>
 8001b6c:	e9d7 b900 	ldrd	fp, r9, [r7]
 8001b70:	3708      	adds	r7, #8
 8001b72:	f1b9 0f00 	cmp.w	r9, #0
 8001b76:	d0f9      	beq.n	8001b6c <__sfvwrite_r+0xd0>
 8001b78:	45d1      	cmp	r9, sl
 8001b7a:	464b      	mov	r3, r9
 8001b7c:	69e1      	ldr	r1, [r4, #28]
 8001b7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001b80:	bf28      	it	cs
 8001b82:	4653      	movcs	r3, sl
 8001b84:	465a      	mov	r2, fp
 8001b86:	4630      	mov	r0, r6
 8001b88:	47a8      	blx	r5
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	dd38      	ble.n	8001c00 <__sfvwrite_r+0x164>
 8001b8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001b92:	4483      	add	fp, r0
 8001b94:	eba9 0900 	sub.w	r9, r9, r0
 8001b98:	1a18      	subs	r0, r3, r0
 8001b9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d1e7      	bne.n	8001b72 <__sfvwrite_r+0xd6>
 8001ba2:	e782      	b.n	8001aaa <__sfvwrite_r+0xe>
 8001ba4:	f04f 0b00 	mov.w	fp, #0
 8001ba8:	f8df a180 	ldr.w	sl, [pc, #384]	; 8001d2c <__sfvwrite_r+0x290>
 8001bac:	46d9      	mov	r9, fp
 8001bae:	e7e0      	b.n	8001b72 <__sfvwrite_r+0xd6>
 8001bb0:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	f1ba 0f00 	cmp.w	sl, #0
 8001bba:	d0f9      	beq.n	8001bb0 <__sfvwrite_r+0x114>
 8001bbc:	89a3      	ldrh	r3, [r4, #12]
 8001bbe:	68a2      	ldr	r2, [r4, #8]
 8001bc0:	6820      	ldr	r0, [r4, #0]
 8001bc2:	0599      	lsls	r1, r3, #22
 8001bc4:	d563      	bpl.n	8001c8e <__sfvwrite_r+0x1f2>
 8001bc6:	4552      	cmp	r2, sl
 8001bc8:	d836      	bhi.n	8001c38 <__sfvwrite_r+0x19c>
 8001bca:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8001bce:	d033      	beq.n	8001c38 <__sfvwrite_r+0x19c>
 8001bd0:	6921      	ldr	r1, [r4, #16]
 8001bd2:	6965      	ldr	r5, [r4, #20]
 8001bd4:	eba0 0b01 	sub.w	fp, r0, r1
 8001bd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001bdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001be0:	f10b 0201 	add.w	r2, fp, #1
 8001be4:	106d      	asrs	r5, r5, #1
 8001be6:	4452      	add	r2, sl
 8001be8:	4295      	cmp	r5, r2
 8001bea:	bf38      	it	cc
 8001bec:	4615      	movcc	r5, r2
 8001bee:	055b      	lsls	r3, r3, #21
 8001bf0:	d53d      	bpl.n	8001c6e <__sfvwrite_r+0x1d2>
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	4630      	mov	r0, r6
 8001bf6:	f000 f8bf 	bl	8001d78 <_malloc_r>
 8001bfa:	b948      	cbnz	r0, 8001c10 <__sfvwrite_r+0x174>
 8001bfc:	230c      	movs	r3, #12
 8001bfe:	6033      	str	r3, [r6, #0]
 8001c00:	89a3      	ldrh	r3, [r4, #12]
 8001c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c06:	81a3      	strh	r3, [r4, #12]
 8001c08:	e7ad      	b.n	8001b66 <__sfvwrite_r+0xca>
 8001c0a:	4699      	mov	r9, r3
 8001c0c:	469a      	mov	sl, r3
 8001c0e:	e7d2      	b.n	8001bb6 <__sfvwrite_r+0x11a>
 8001c10:	465a      	mov	r2, fp
 8001c12:	6921      	ldr	r1, [r4, #16]
 8001c14:	9001      	str	r0, [sp, #4]
 8001c16:	f000 faf1 	bl	80021fc <memcpy>
 8001c1a:	89a2      	ldrh	r2, [r4, #12]
 8001c1c:	9b01      	ldr	r3, [sp, #4]
 8001c1e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8001c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c26:	81a2      	strh	r2, [r4, #12]
 8001c28:	6123      	str	r3, [r4, #16]
 8001c2a:	6165      	str	r5, [r4, #20]
 8001c2c:	445b      	add	r3, fp
 8001c2e:	eba5 050b 	sub.w	r5, r5, fp
 8001c32:	6023      	str	r3, [r4, #0]
 8001c34:	4652      	mov	r2, sl
 8001c36:	60a5      	str	r5, [r4, #8]
 8001c38:	4552      	cmp	r2, sl
 8001c3a:	bf28      	it	cs
 8001c3c:	4652      	movcs	r2, sl
 8001c3e:	6820      	ldr	r0, [r4, #0]
 8001c40:	9201      	str	r2, [sp, #4]
 8001c42:	4649      	mov	r1, r9
 8001c44:	f000 fae8 	bl	8002218 <memmove>
 8001c48:	68a3      	ldr	r3, [r4, #8]
 8001c4a:	9a01      	ldr	r2, [sp, #4]
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	60a3      	str	r3, [r4, #8]
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	441a      	add	r2, r3
 8001c54:	4655      	mov	r5, sl
 8001c56:	6022      	str	r2, [r4, #0]
 8001c58:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8001c5c:	44a9      	add	r9, r5
 8001c5e:	ebaa 0a05 	sub.w	sl, sl, r5
 8001c62:	1b45      	subs	r5, r0, r5
 8001c64:	f8c8 5008 	str.w	r5, [r8, #8]
 8001c68:	2d00      	cmp	r5, #0
 8001c6a:	d1a4      	bne.n	8001bb6 <__sfvwrite_r+0x11a>
 8001c6c:	e71d      	b.n	8001aaa <__sfvwrite_r+0xe>
 8001c6e:	462a      	mov	r2, r5
 8001c70:	4630      	mov	r0, r6
 8001c72:	f000 faf7 	bl	8002264 <_realloc_r>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d1d5      	bne.n	8001c28 <__sfvwrite_r+0x18c>
 8001c7c:	6921      	ldr	r1, [r4, #16]
 8001c7e:	4630      	mov	r0, r6
 8001c80:	f000 ff0e 	bl	8002aa0 <_free_r>
 8001c84:	89a3      	ldrh	r3, [r4, #12]
 8001c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c8a:	81a3      	strh	r3, [r4, #12]
 8001c8c:	e7b6      	b.n	8001bfc <__sfvwrite_r+0x160>
 8001c8e:	6923      	ldr	r3, [r4, #16]
 8001c90:	4283      	cmp	r3, r0
 8001c92:	d302      	bcc.n	8001c9a <__sfvwrite_r+0x1fe>
 8001c94:	6961      	ldr	r1, [r4, #20]
 8001c96:	4551      	cmp	r1, sl
 8001c98:	d915      	bls.n	8001cc6 <__sfvwrite_r+0x22a>
 8001c9a:	4552      	cmp	r2, sl
 8001c9c:	bf28      	it	cs
 8001c9e:	4652      	movcs	r2, sl
 8001ca0:	4649      	mov	r1, r9
 8001ca2:	4615      	mov	r5, r2
 8001ca4:	f000 fab8 	bl	8002218 <memmove>
 8001ca8:	68a3      	ldr	r3, [r4, #8]
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	1b5b      	subs	r3, r3, r5
 8001cae:	442a      	add	r2, r5
 8001cb0:	60a3      	str	r3, [r4, #8]
 8001cb2:	6022      	str	r2, [r4, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1cf      	bne.n	8001c58 <__sfvwrite_r+0x1bc>
 8001cb8:	4621      	mov	r1, r4
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f000 fe76 	bl	80029ac <_fflush_r>
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d0c9      	beq.n	8001c58 <__sfvwrite_r+0x1bc>
 8001cc4:	e79c      	b.n	8001c00 <__sfvwrite_r+0x164>
 8001cc6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001cca:	459a      	cmp	sl, r3
 8001ccc:	bf38      	it	cc
 8001cce:	4653      	movcc	r3, sl
 8001cd0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001cd2:	fb93 f3f1 	sdiv	r3, r3, r1
 8001cd6:	464a      	mov	r2, r9
 8001cd8:	434b      	muls	r3, r1
 8001cda:	4630      	mov	r0, r6
 8001cdc:	69e1      	ldr	r1, [r4, #28]
 8001cde:	47a8      	blx	r5
 8001ce0:	1e05      	subs	r5, r0, #0
 8001ce2:	dcb9      	bgt.n	8001c58 <__sfvwrite_r+0x1bc>
 8001ce4:	e78c      	b.n	8001c00 <__sfvwrite_r+0x164>
 8001ce6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001cea:	2000      	movs	r0, #0
 8001cec:	3708      	adds	r7, #8
 8001cee:	e6f3      	b.n	8001ad8 <__sfvwrite_r+0x3c>
 8001cf0:	f10b 0901 	add.w	r9, fp, #1
 8001cf4:	e700      	b.n	8001af8 <__sfvwrite_r+0x5c>
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	dc08      	bgt.n	8001d0c <__sfvwrite_r+0x270>
 8001cfa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001cfc:	69e1      	ldr	r1, [r4, #28]
 8001cfe:	4652      	mov	r2, sl
 8001d00:	4630      	mov	r0, r6
 8001d02:	47a8      	blx	r5
 8001d04:	1e05      	subs	r5, r0, #0
 8001d06:	f73f af13 	bgt.w	8001b30 <__sfvwrite_r+0x94>
 8001d0a:	e779      	b.n	8001c00 <__sfvwrite_r+0x164>
 8001d0c:	4651      	mov	r1, sl
 8001d0e:	9201      	str	r2, [sp, #4]
 8001d10:	f000 fa82 	bl	8002218 <memmove>
 8001d14:	9a01      	ldr	r2, [sp, #4]
 8001d16:	68a3      	ldr	r3, [r4, #8]
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	60a3      	str	r3, [r4, #8]
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	6023      	str	r3, [r4, #0]
 8001d22:	4615      	mov	r5, r2
 8001d24:	e704      	b.n	8001b30 <__sfvwrite_r+0x94>
 8001d26:	2001      	movs	r0, #1
 8001d28:	e70c      	b.n	8001b44 <__sfvwrite_r+0xa8>
 8001d2a:	bf00      	nop
 8001d2c:	7ffffc00 	.word	0x7ffffc00

08001d30 <_fwalk_reent>:
 8001d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d34:	4606      	mov	r6, r0
 8001d36:	4688      	mov	r8, r1
 8001d38:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8001d3c:	2700      	movs	r7, #0
 8001d3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d42:	f1b9 0901 	subs.w	r9, r9, #1
 8001d46:	d505      	bpl.n	8001d54 <_fwalk_reent+0x24>
 8001d48:	6824      	ldr	r4, [r4, #0]
 8001d4a:	2c00      	cmp	r4, #0
 8001d4c:	d1f7      	bne.n	8001d3e <_fwalk_reent+0xe>
 8001d4e:	4638      	mov	r0, r7
 8001d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d54:	89ab      	ldrh	r3, [r5, #12]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d907      	bls.n	8001d6a <_fwalk_reent+0x3a>
 8001d5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	d003      	beq.n	8001d6a <_fwalk_reent+0x3a>
 8001d62:	4629      	mov	r1, r5
 8001d64:	4630      	mov	r0, r6
 8001d66:	47c0      	blx	r8
 8001d68:	4307      	orrs	r7, r0
 8001d6a:	3568      	adds	r5, #104	; 0x68
 8001d6c:	e7e9      	b.n	8001d42 <_fwalk_reent+0x12>

08001d6e <__retarget_lock_init_recursive>:
 8001d6e:	4770      	bx	lr

08001d70 <__retarget_lock_close_recursive>:
 8001d70:	4770      	bx	lr

08001d72 <__retarget_lock_acquire_recursive>:
 8001d72:	4770      	bx	lr

08001d74 <__retarget_lock_release_recursive>:
 8001d74:	4770      	bx	lr
	...

08001d78 <_malloc_r>:
 8001d78:	f101 030b 	add.w	r3, r1, #11
 8001d7c:	2b16      	cmp	r3, #22
 8001d7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d82:	4605      	mov	r5, r0
 8001d84:	d906      	bls.n	8001d94 <_malloc_r+0x1c>
 8001d86:	f033 0707 	bics.w	r7, r3, #7
 8001d8a:	d504      	bpl.n	8001d96 <_malloc_r+0x1e>
 8001d8c:	230c      	movs	r3, #12
 8001d8e:	602b      	str	r3, [r5, #0]
 8001d90:	2400      	movs	r4, #0
 8001d92:	e1ae      	b.n	80020f2 <_malloc_r+0x37a>
 8001d94:	2710      	movs	r7, #16
 8001d96:	42b9      	cmp	r1, r7
 8001d98:	d8f8      	bhi.n	8001d8c <_malloc_r+0x14>
 8001d9a:	4628      	mov	r0, r5
 8001d9c:	f000 fa56 	bl	800224c <__malloc_lock>
 8001da0:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8001da4:	4ec3      	ldr	r6, [pc, #780]	; (80020b4 <_malloc_r+0x33c>)
 8001da6:	d238      	bcs.n	8001e1a <_malloc_r+0xa2>
 8001da8:	f107 0208 	add.w	r2, r7, #8
 8001dac:	4432      	add	r2, r6
 8001dae:	f1a2 0108 	sub.w	r1, r2, #8
 8001db2:	6854      	ldr	r4, [r2, #4]
 8001db4:	428c      	cmp	r4, r1
 8001db6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8001dba:	d102      	bne.n	8001dc2 <_malloc_r+0x4a>
 8001dbc:	68d4      	ldr	r4, [r2, #12]
 8001dbe:	42a2      	cmp	r2, r4
 8001dc0:	d010      	beq.n	8001de4 <_malloc_r+0x6c>
 8001dc2:	6863      	ldr	r3, [r4, #4]
 8001dc4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001dc8:	f023 0303 	bic.w	r3, r3, #3
 8001dcc:	60ca      	str	r2, [r1, #12]
 8001dce:	4423      	add	r3, r4
 8001dd0:	6091      	str	r1, [r2, #8]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	f042 0201 	orr.w	r2, r2, #1
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	4628      	mov	r0, r5
 8001ddc:	f000 fa3c 	bl	8002258 <__malloc_unlock>
 8001de0:	3408      	adds	r4, #8
 8001de2:	e186      	b.n	80020f2 <_malloc_r+0x37a>
 8001de4:	3302      	adds	r3, #2
 8001de6:	4ab4      	ldr	r2, [pc, #720]	; (80020b8 <_malloc_r+0x340>)
 8001de8:	6934      	ldr	r4, [r6, #16]
 8001dea:	4294      	cmp	r4, r2
 8001dec:	4611      	mov	r1, r2
 8001dee:	d077      	beq.n	8001ee0 <_malloc_r+0x168>
 8001df0:	6860      	ldr	r0, [r4, #4]
 8001df2:	f020 0c03 	bic.w	ip, r0, #3
 8001df6:	ebac 0007 	sub.w	r0, ip, r7
 8001dfa:	280f      	cmp	r0, #15
 8001dfc:	dd48      	ble.n	8001e90 <_malloc_r+0x118>
 8001dfe:	19e1      	adds	r1, r4, r7
 8001e00:	f040 0301 	orr.w	r3, r0, #1
 8001e04:	f047 0701 	orr.w	r7, r7, #1
 8001e08:	6067      	str	r7, [r4, #4]
 8001e0a:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8001e0e:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	f844 000c 	str.w	r0, [r4, ip]
 8001e18:	e7df      	b.n	8001dda <_malloc_r+0x62>
 8001e1a:	0a7b      	lsrs	r3, r7, #9
 8001e1c:	d02a      	beq.n	8001e74 <_malloc_r+0xfc>
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d812      	bhi.n	8001e48 <_malloc_r+0xd0>
 8001e22:	09bb      	lsrs	r3, r7, #6
 8001e24:	3338      	adds	r3, #56	; 0x38
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8001e2c:	f1a2 0c08 	sub.w	ip, r2, #8
 8001e30:	6854      	ldr	r4, [r2, #4]
 8001e32:	4564      	cmp	r4, ip
 8001e34:	d006      	beq.n	8001e44 <_malloc_r+0xcc>
 8001e36:	6862      	ldr	r2, [r4, #4]
 8001e38:	f022 0203 	bic.w	r2, r2, #3
 8001e3c:	1bd0      	subs	r0, r2, r7
 8001e3e:	280f      	cmp	r0, #15
 8001e40:	dd1c      	ble.n	8001e7c <_malloc_r+0x104>
 8001e42:	3b01      	subs	r3, #1
 8001e44:	3301      	adds	r3, #1
 8001e46:	e7ce      	b.n	8001de6 <_malloc_r+0x6e>
 8001e48:	2b14      	cmp	r3, #20
 8001e4a:	d801      	bhi.n	8001e50 <_malloc_r+0xd8>
 8001e4c:	335b      	adds	r3, #91	; 0x5b
 8001e4e:	e7ea      	b.n	8001e26 <_malloc_r+0xae>
 8001e50:	2b54      	cmp	r3, #84	; 0x54
 8001e52:	d802      	bhi.n	8001e5a <_malloc_r+0xe2>
 8001e54:	0b3b      	lsrs	r3, r7, #12
 8001e56:	336e      	adds	r3, #110	; 0x6e
 8001e58:	e7e5      	b.n	8001e26 <_malloc_r+0xae>
 8001e5a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001e5e:	d802      	bhi.n	8001e66 <_malloc_r+0xee>
 8001e60:	0bfb      	lsrs	r3, r7, #15
 8001e62:	3377      	adds	r3, #119	; 0x77
 8001e64:	e7df      	b.n	8001e26 <_malloc_r+0xae>
 8001e66:	f240 5254 	movw	r2, #1364	; 0x554
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d804      	bhi.n	8001e78 <_malloc_r+0x100>
 8001e6e:	0cbb      	lsrs	r3, r7, #18
 8001e70:	337c      	adds	r3, #124	; 0x7c
 8001e72:	e7d8      	b.n	8001e26 <_malloc_r+0xae>
 8001e74:	233f      	movs	r3, #63	; 0x3f
 8001e76:	e7d6      	b.n	8001e26 <_malloc_r+0xae>
 8001e78:	237e      	movs	r3, #126	; 0x7e
 8001e7a:	e7d4      	b.n	8001e26 <_malloc_r+0xae>
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	68e1      	ldr	r1, [r4, #12]
 8001e80:	db04      	blt.n	8001e8c <_malloc_r+0x114>
 8001e82:	68a3      	ldr	r3, [r4, #8]
 8001e84:	60d9      	str	r1, [r3, #12]
 8001e86:	608b      	str	r3, [r1, #8]
 8001e88:	18a3      	adds	r3, r4, r2
 8001e8a:	e7a2      	b.n	8001dd2 <_malloc_r+0x5a>
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	e7d0      	b.n	8001e32 <_malloc_r+0xba>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8001e96:	db07      	blt.n	8001ea8 <_malloc_r+0x130>
 8001e98:	44a4      	add	ip, r4
 8001e9a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	f8cc 3004 	str.w	r3, [ip, #4]
 8001ea6:	e798      	b.n	8001dda <_malloc_r+0x62>
 8001ea8:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8001eac:	6870      	ldr	r0, [r6, #4]
 8001eae:	f080 809e 	bcs.w	8001fee <_malloc_r+0x276>
 8001eb2:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8001eb6:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8001eba:	f04f 0c01 	mov.w	ip, #1
 8001ebe:	3201      	adds	r2, #1
 8001ec0:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001ec4:	ea4c 0000 	orr.w	r0, ip, r0
 8001ec8:	6070      	str	r0, [r6, #4]
 8001eca:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8001ece:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8001ed2:	3808      	subs	r0, #8
 8001ed4:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8001ed8:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8001edc:	f8cc 400c 	str.w	r4, [ip, #12]
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	109a      	asrs	r2, r3, #2
 8001ee4:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee8:	6870      	ldr	r0, [r6, #4]
 8001eea:	4290      	cmp	r0, r2
 8001eec:	d326      	bcc.n	8001f3c <_malloc_r+0x1c4>
 8001eee:	4210      	tst	r0, r2
 8001ef0:	d106      	bne.n	8001f00 <_malloc_r+0x188>
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	0052      	lsls	r2, r2, #1
 8001ef8:	4210      	tst	r0, r2
 8001efa:	f103 0304 	add.w	r3, r3, #4
 8001efe:	d0fa      	beq.n	8001ef6 <_malloc_r+0x17e>
 8001f00:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8001f04:	46c1      	mov	r9, r8
 8001f06:	469e      	mov	lr, r3
 8001f08:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8001f0c:	454c      	cmp	r4, r9
 8001f0e:	f040 80b3 	bne.w	8002078 <_malloc_r+0x300>
 8001f12:	f10e 0e01 	add.w	lr, lr, #1
 8001f16:	f01e 0f03 	tst.w	lr, #3
 8001f1a:	f109 0908 	add.w	r9, r9, #8
 8001f1e:	d1f3      	bne.n	8001f08 <_malloc_r+0x190>
 8001f20:	0798      	lsls	r0, r3, #30
 8001f22:	f040 80ec 	bne.w	80020fe <_malloc_r+0x386>
 8001f26:	6873      	ldr	r3, [r6, #4]
 8001f28:	ea23 0302 	bic.w	r3, r3, r2
 8001f2c:	6073      	str	r3, [r6, #4]
 8001f2e:	6870      	ldr	r0, [r6, #4]
 8001f30:	0052      	lsls	r2, r2, #1
 8001f32:	4290      	cmp	r0, r2
 8001f34:	d302      	bcc.n	8001f3c <_malloc_r+0x1c4>
 8001f36:	2a00      	cmp	r2, #0
 8001f38:	f040 80ee 	bne.w	8002118 <_malloc_r+0x3a0>
 8001f3c:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8001f40:	f8db 1004 	ldr.w	r1, [fp, #4]
 8001f44:	f021 0903 	bic.w	r9, r1, #3
 8001f48:	45b9      	cmp	r9, r7
 8001f4a:	d304      	bcc.n	8001f56 <_malloc_r+0x1de>
 8001f4c:	eba9 0207 	sub.w	r2, r9, r7
 8001f50:	2a0f      	cmp	r2, #15
 8001f52:	f300 8149 	bgt.w	80021e8 <_malloc_r+0x470>
 8001f56:	4a59      	ldr	r2, [pc, #356]	; (80020bc <_malloc_r+0x344>)
 8001f58:	6811      	ldr	r1, [r2, #0]
 8001f5a:	3110      	adds	r1, #16
 8001f5c:	eb0b 0309 	add.w	r3, fp, r9
 8001f60:	4439      	add	r1, r7
 8001f62:	2008      	movs	r0, #8
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	9100      	str	r1, [sp, #0]
 8001f68:	f000 fb73 	bl	8002652 <sysconf>
 8001f6c:	4a54      	ldr	r2, [pc, #336]	; (80020c0 <_malloc_r+0x348>)
 8001f6e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8001f72:	4680      	mov	r8, r0
 8001f74:	6810      	ldr	r0, [r2, #0]
 8001f76:	3001      	adds	r0, #1
 8001f78:	bf1f      	itttt	ne
 8001f7a:	f101 31ff 	addne.w	r1, r1, #4294967295
 8001f7e:	4441      	addne	r1, r8
 8001f80:	f1c8 0000 	rsbne	r0, r8, #0
 8001f84:	4001      	andne	r1, r0
 8001f86:	4628      	mov	r0, r5
 8001f88:	e9cd 1300 	strd	r1, r3, [sp]
 8001f8c:	f000 fb0e 	bl	80025ac <_sbrk_r>
 8001f90:	1c42      	adds	r2, r0, #1
 8001f92:	4604      	mov	r4, r0
 8001f94:	f000 80fc 	beq.w	8002190 <_malloc_r+0x418>
 8001f98:	9b01      	ldr	r3, [sp, #4]
 8001f9a:	9900      	ldr	r1, [sp, #0]
 8001f9c:	4a48      	ldr	r2, [pc, #288]	; (80020c0 <_malloc_r+0x348>)
 8001f9e:	4283      	cmp	r3, r0
 8001fa0:	d902      	bls.n	8001fa8 <_malloc_r+0x230>
 8001fa2:	45b3      	cmp	fp, r6
 8001fa4:	f040 80f4 	bne.w	8002190 <_malloc_r+0x418>
 8001fa8:	f8df a120 	ldr.w	sl, [pc, #288]	; 80020cc <_malloc_r+0x354>
 8001fac:	f8da 0000 	ldr.w	r0, [sl]
 8001fb0:	42a3      	cmp	r3, r4
 8001fb2:	eb00 0e01 	add.w	lr, r0, r1
 8001fb6:	f8ca e000 	str.w	lr, [sl]
 8001fba:	f108 3cff 	add.w	ip, r8, #4294967295
 8001fbe:	f040 80ad 	bne.w	800211c <_malloc_r+0x3a4>
 8001fc2:	ea13 0f0c 	tst.w	r3, ip
 8001fc6:	f040 80a9 	bne.w	800211c <_malloc_r+0x3a4>
 8001fca:	68b3      	ldr	r3, [r6, #8]
 8001fcc:	4449      	add	r1, r9
 8001fce:	f041 0101 	orr.w	r1, r1, #1
 8001fd2:	6059      	str	r1, [r3, #4]
 8001fd4:	4a3b      	ldr	r2, [pc, #236]	; (80020c4 <_malloc_r+0x34c>)
 8001fd6:	f8da 3000 	ldr.w	r3, [sl]
 8001fda:	6811      	ldr	r1, [r2, #0]
 8001fdc:	428b      	cmp	r3, r1
 8001fde:	bf88      	it	hi
 8001fe0:	6013      	strhi	r3, [r2, #0]
 8001fe2:	4a39      	ldr	r2, [pc, #228]	; (80020c8 <_malloc_r+0x350>)
 8001fe4:	6811      	ldr	r1, [r2, #0]
 8001fe6:	428b      	cmp	r3, r1
 8001fe8:	bf88      	it	hi
 8001fea:	6013      	strhi	r3, [r2, #0]
 8001fec:	e0d0      	b.n	8002190 <_malloc_r+0x418>
 8001fee:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8001ff2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8001ff6:	d218      	bcs.n	800202a <_malloc_r+0x2b2>
 8001ff8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8001ffc:	3238      	adds	r2, #56	; 0x38
 8001ffe:	f102 0e01 	add.w	lr, r2, #1
 8002002:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8002006:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800200a:	45f0      	cmp	r8, lr
 800200c:	d12b      	bne.n	8002066 <_malloc_r+0x2ee>
 800200e:	1092      	asrs	r2, r2, #2
 8002010:	f04f 0c01 	mov.w	ip, #1
 8002014:	fa0c f202 	lsl.w	r2, ip, r2
 8002018:	4310      	orrs	r0, r2
 800201a:	6070      	str	r0, [r6, #4]
 800201c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8002020:	f8c8 4008 	str.w	r4, [r8, #8]
 8002024:	f8ce 400c 	str.w	r4, [lr, #12]
 8002028:	e75a      	b.n	8001ee0 <_malloc_r+0x168>
 800202a:	2a14      	cmp	r2, #20
 800202c:	d801      	bhi.n	8002032 <_malloc_r+0x2ba>
 800202e:	325b      	adds	r2, #91	; 0x5b
 8002030:	e7e5      	b.n	8001ffe <_malloc_r+0x286>
 8002032:	2a54      	cmp	r2, #84	; 0x54
 8002034:	d803      	bhi.n	800203e <_malloc_r+0x2c6>
 8002036:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800203a:	326e      	adds	r2, #110	; 0x6e
 800203c:	e7df      	b.n	8001ffe <_malloc_r+0x286>
 800203e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8002042:	d803      	bhi.n	800204c <_malloc_r+0x2d4>
 8002044:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8002048:	3277      	adds	r2, #119	; 0x77
 800204a:	e7d8      	b.n	8001ffe <_malloc_r+0x286>
 800204c:	f240 5e54 	movw	lr, #1364	; 0x554
 8002050:	4572      	cmp	r2, lr
 8002052:	bf9a      	itte	ls
 8002054:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8002058:	327c      	addls	r2, #124	; 0x7c
 800205a:	227e      	movhi	r2, #126	; 0x7e
 800205c:	e7cf      	b.n	8001ffe <_malloc_r+0x286>
 800205e:	f8de e008 	ldr.w	lr, [lr, #8]
 8002062:	45f0      	cmp	r8, lr
 8002064:	d005      	beq.n	8002072 <_malloc_r+0x2fa>
 8002066:	f8de 2004 	ldr.w	r2, [lr, #4]
 800206a:	f022 0203 	bic.w	r2, r2, #3
 800206e:	4562      	cmp	r2, ip
 8002070:	d8f5      	bhi.n	800205e <_malloc_r+0x2e6>
 8002072:	f8de 800c 	ldr.w	r8, [lr, #12]
 8002076:	e7d1      	b.n	800201c <_malloc_r+0x2a4>
 8002078:	6860      	ldr	r0, [r4, #4]
 800207a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800207e:	f020 0003 	bic.w	r0, r0, #3
 8002082:	eba0 0a07 	sub.w	sl, r0, r7
 8002086:	f1ba 0f0f 	cmp.w	sl, #15
 800208a:	dd21      	ble.n	80020d0 <_malloc_r+0x358>
 800208c:	68a3      	ldr	r3, [r4, #8]
 800208e:	19e2      	adds	r2, r4, r7
 8002090:	f047 0701 	orr.w	r7, r7, #1
 8002094:	6067      	str	r7, [r4, #4]
 8002096:	f8c3 c00c 	str.w	ip, [r3, #12]
 800209a:	f8cc 3008 	str.w	r3, [ip, #8]
 800209e:	f04a 0301 	orr.w	r3, sl, #1
 80020a2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80020a6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80020aa:	6053      	str	r3, [r2, #4]
 80020ac:	f844 a000 	str.w	sl, [r4, r0]
 80020b0:	e693      	b.n	8001dda <_malloc_r+0x62>
 80020b2:	bf00      	nop
 80020b4:	20000444 	.word	0x20000444
 80020b8:	2000044c 	.word	0x2000044c
 80020bc:	200008c4 	.word	0x200008c4
 80020c0:	2000084c 	.word	0x2000084c
 80020c4:	200008bc 	.word	0x200008bc
 80020c8:	200008c0 	.word	0x200008c0
 80020cc:	20000894 	.word	0x20000894
 80020d0:	f1ba 0f00 	cmp.w	sl, #0
 80020d4:	db11      	blt.n	80020fa <_malloc_r+0x382>
 80020d6:	4420      	add	r0, r4
 80020d8:	6843      	ldr	r3, [r0, #4]
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6043      	str	r3, [r0, #4]
 80020e0:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80020e4:	4628      	mov	r0, r5
 80020e6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80020ea:	f8cc 3008 	str.w	r3, [ip, #8]
 80020ee:	f000 f8b3 	bl	8002258 <__malloc_unlock>
 80020f2:	4620      	mov	r0, r4
 80020f4:	b003      	add	sp, #12
 80020f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020fa:	4664      	mov	r4, ip
 80020fc:	e706      	b.n	8001f0c <_malloc_r+0x194>
 80020fe:	f858 0908 	ldr.w	r0, [r8], #-8
 8002102:	4540      	cmp	r0, r8
 8002104:	f103 33ff 	add.w	r3, r3, #4294967295
 8002108:	f43f af0a 	beq.w	8001f20 <_malloc_r+0x1a8>
 800210c:	e70f      	b.n	8001f2e <_malloc_r+0x1b6>
 800210e:	3304      	adds	r3, #4
 8002110:	0052      	lsls	r2, r2, #1
 8002112:	4210      	tst	r0, r2
 8002114:	d0fb      	beq.n	800210e <_malloc_r+0x396>
 8002116:	e6f3      	b.n	8001f00 <_malloc_r+0x188>
 8002118:	4673      	mov	r3, lr
 800211a:	e7fa      	b.n	8002112 <_malloc_r+0x39a>
 800211c:	6810      	ldr	r0, [r2, #0]
 800211e:	3001      	adds	r0, #1
 8002120:	bf1b      	ittet	ne
 8002122:	1ae3      	subne	r3, r4, r3
 8002124:	4473      	addne	r3, lr
 8002126:	6014      	streq	r4, [r2, #0]
 8002128:	f8ca 3000 	strne.w	r3, [sl]
 800212c:	f014 0307 	ands.w	r3, r4, #7
 8002130:	bf1a      	itte	ne
 8002132:	f1c3 0008 	rsbne	r0, r3, #8
 8002136:	1824      	addne	r4, r4, r0
 8002138:	4618      	moveq	r0, r3
 800213a:	1862      	adds	r2, r4, r1
 800213c:	ea02 010c 	and.w	r1, r2, ip
 8002140:	4480      	add	r8, r0
 8002142:	eba8 0801 	sub.w	r8, r8, r1
 8002146:	ea08 080c 	and.w	r8, r8, ip
 800214a:	4641      	mov	r1, r8
 800214c:	4628      	mov	r0, r5
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	9200      	str	r2, [sp, #0]
 8002152:	f000 fa2b 	bl	80025ac <_sbrk_r>
 8002156:	1c43      	adds	r3, r0, #1
 8002158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800215c:	d105      	bne.n	800216a <_malloc_r+0x3f2>
 800215e:	b32b      	cbz	r3, 80021ac <_malloc_r+0x434>
 8002160:	f1a3 0008 	sub.w	r0, r3, #8
 8002164:	4410      	add	r0, r2
 8002166:	f04f 0800 	mov.w	r8, #0
 800216a:	f8da 2000 	ldr.w	r2, [sl]
 800216e:	60b4      	str	r4, [r6, #8]
 8002170:	1b00      	subs	r0, r0, r4
 8002172:	4440      	add	r0, r8
 8002174:	4442      	add	r2, r8
 8002176:	f040 0001 	orr.w	r0, r0, #1
 800217a:	45b3      	cmp	fp, r6
 800217c:	f8ca 2000 	str.w	r2, [sl]
 8002180:	6060      	str	r0, [r4, #4]
 8002182:	f43f af27 	beq.w	8001fd4 <_malloc_r+0x25c>
 8002186:	f1b9 0f0f 	cmp.w	r9, #15
 800218a:	d812      	bhi.n	80021b2 <_malloc_r+0x43a>
 800218c:	2301      	movs	r3, #1
 800218e:	6063      	str	r3, [r4, #4]
 8002190:	68b3      	ldr	r3, [r6, #8]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f023 0303 	bic.w	r3, r3, #3
 8002198:	42bb      	cmp	r3, r7
 800219a:	eba3 0207 	sub.w	r2, r3, r7
 800219e:	d301      	bcc.n	80021a4 <_malloc_r+0x42c>
 80021a0:	2a0f      	cmp	r2, #15
 80021a2:	dc21      	bgt.n	80021e8 <_malloc_r+0x470>
 80021a4:	4628      	mov	r0, r5
 80021a6:	f000 f857 	bl	8002258 <__malloc_unlock>
 80021aa:	e5f1      	b.n	8001d90 <_malloc_r+0x18>
 80021ac:	4610      	mov	r0, r2
 80021ae:	4698      	mov	r8, r3
 80021b0:	e7db      	b.n	800216a <_malloc_r+0x3f2>
 80021b2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80021b6:	f1a9 090c 	sub.w	r9, r9, #12
 80021ba:	f029 0907 	bic.w	r9, r9, #7
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	ea43 0309 	orr.w	r3, r3, r9
 80021c6:	f8cb 3004 	str.w	r3, [fp, #4]
 80021ca:	2205      	movs	r2, #5
 80021cc:	eb0b 0309 	add.w	r3, fp, r9
 80021d0:	f1b9 0f0f 	cmp.w	r9, #15
 80021d4:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80021d8:	f67f aefc 	bls.w	8001fd4 <_malloc_r+0x25c>
 80021dc:	f10b 0108 	add.w	r1, fp, #8
 80021e0:	4628      	mov	r0, r5
 80021e2:	f000 fc5d 	bl	8002aa0 <_free_r>
 80021e6:	e6f5      	b.n	8001fd4 <_malloc_r+0x25c>
 80021e8:	68b4      	ldr	r4, [r6, #8]
 80021ea:	f047 0301 	orr.w	r3, r7, #1
 80021ee:	4427      	add	r7, r4
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	6063      	str	r3, [r4, #4]
 80021f6:	60b7      	str	r7, [r6, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	e5ee      	b.n	8001dda <_malloc_r+0x62>

080021fc <memcpy>:
 80021fc:	440a      	add	r2, r1
 80021fe:	4291      	cmp	r1, r2
 8002200:	f100 33ff 	add.w	r3, r0, #4294967295
 8002204:	d100      	bne.n	8002208 <memcpy+0xc>
 8002206:	4770      	bx	lr
 8002208:	b510      	push	{r4, lr}
 800220a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800220e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002212:	4291      	cmp	r1, r2
 8002214:	d1f9      	bne.n	800220a <memcpy+0xe>
 8002216:	bd10      	pop	{r4, pc}

08002218 <memmove>:
 8002218:	4288      	cmp	r0, r1
 800221a:	b510      	push	{r4, lr}
 800221c:	eb01 0402 	add.w	r4, r1, r2
 8002220:	d902      	bls.n	8002228 <memmove+0x10>
 8002222:	4284      	cmp	r4, r0
 8002224:	4623      	mov	r3, r4
 8002226:	d807      	bhi.n	8002238 <memmove+0x20>
 8002228:	1e43      	subs	r3, r0, #1
 800222a:	42a1      	cmp	r1, r4
 800222c:	d008      	beq.n	8002240 <memmove+0x28>
 800222e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002232:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002236:	e7f8      	b.n	800222a <memmove+0x12>
 8002238:	4402      	add	r2, r0
 800223a:	4601      	mov	r1, r0
 800223c:	428a      	cmp	r2, r1
 800223e:	d100      	bne.n	8002242 <memmove+0x2a>
 8002240:	bd10      	pop	{r4, pc}
 8002242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002246:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800224a:	e7f7      	b.n	800223c <memmove+0x24>

0800224c <__malloc_lock>:
 800224c:	4801      	ldr	r0, [pc, #4]	; (8002254 <__malloc_lock+0x8>)
 800224e:	f7ff bd90 	b.w	8001d72 <__retarget_lock_acquire_recursive>
 8002252:	bf00      	nop
 8002254:	200009a0 	.word	0x200009a0

08002258 <__malloc_unlock>:
 8002258:	4801      	ldr	r0, [pc, #4]	; (8002260 <__malloc_unlock+0x8>)
 800225a:	f7ff bd8b 	b.w	8001d74 <__retarget_lock_release_recursive>
 800225e:	bf00      	nop
 8002260:	200009a0 	.word	0x200009a0

08002264 <_realloc_r>:
 8002264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002268:	460c      	mov	r4, r1
 800226a:	4681      	mov	r9, r0
 800226c:	4611      	mov	r1, r2
 800226e:	b924      	cbnz	r4, 800227a <_realloc_r+0x16>
 8002270:	b003      	add	sp, #12
 8002272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002276:	f7ff bd7f 	b.w	8001d78 <_malloc_r>
 800227a:	9201      	str	r2, [sp, #4]
 800227c:	f7ff ffe6 	bl	800224c <__malloc_lock>
 8002280:	9901      	ldr	r1, [sp, #4]
 8002282:	f101 080b 	add.w	r8, r1, #11
 8002286:	f1b8 0f16 	cmp.w	r8, #22
 800228a:	d90b      	bls.n	80022a4 <_realloc_r+0x40>
 800228c:	f038 0807 	bics.w	r8, r8, #7
 8002290:	d50a      	bpl.n	80022a8 <_realloc_r+0x44>
 8002292:	230c      	movs	r3, #12
 8002294:	f8c9 3000 	str.w	r3, [r9]
 8002298:	f04f 0b00 	mov.w	fp, #0
 800229c:	4658      	mov	r0, fp
 800229e:	b003      	add	sp, #12
 80022a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022a4:	f04f 0810 	mov.w	r8, #16
 80022a8:	4588      	cmp	r8, r1
 80022aa:	d3f2      	bcc.n	8002292 <_realloc_r+0x2e>
 80022ac:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80022b0:	f025 0603 	bic.w	r6, r5, #3
 80022b4:	45b0      	cmp	r8, r6
 80022b6:	f1a4 0a08 	sub.w	sl, r4, #8
 80022ba:	f340 816e 	ble.w	800259a <_realloc_r+0x336>
 80022be:	48a8      	ldr	r0, [pc, #672]	; (8002560 <_realloc_r+0x2fc>)
 80022c0:	9001      	str	r0, [sp, #4]
 80022c2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80022c6:	eb0a 0306 	add.w	r3, sl, r6
 80022ca:	459c      	cmp	ip, r3
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	d005      	beq.n	80022dc <_realloc_r+0x78>
 80022d0:	f022 0001 	bic.w	r0, r2, #1
 80022d4:	4418      	add	r0, r3
 80022d6:	6840      	ldr	r0, [r0, #4]
 80022d8:	07c7      	lsls	r7, r0, #31
 80022da:	d427      	bmi.n	800232c <_realloc_r+0xc8>
 80022dc:	f022 0203 	bic.w	r2, r2, #3
 80022e0:	459c      	cmp	ip, r3
 80022e2:	eb06 0702 	add.w	r7, r6, r2
 80022e6:	d119      	bne.n	800231c <_realloc_r+0xb8>
 80022e8:	f108 0010 	add.w	r0, r8, #16
 80022ec:	42b8      	cmp	r0, r7
 80022ee:	dc1f      	bgt.n	8002330 <_realloc_r+0xcc>
 80022f0:	eb0a 0308 	add.w	r3, sl, r8
 80022f4:	9a01      	ldr	r2, [sp, #4]
 80022f6:	eba7 0708 	sub.w	r7, r7, r8
 80022fa:	f047 0701 	orr.w	r7, r7, #1
 80022fe:	6093      	str	r3, [r2, #8]
 8002300:	605f      	str	r7, [r3, #4]
 8002302:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	ea43 0308 	orr.w	r3, r3, r8
 800230e:	f844 3c04 	str.w	r3, [r4, #-4]
 8002312:	4648      	mov	r0, r9
 8002314:	f7ff ffa0 	bl	8002258 <__malloc_unlock>
 8002318:	46a3      	mov	fp, r4
 800231a:	e7bf      	b.n	800229c <_realloc_r+0x38>
 800231c:	45b8      	cmp	r8, r7
 800231e:	dc07      	bgt.n	8002330 <_realloc_r+0xcc>
 8002320:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	6093      	str	r3, [r2, #8]
 8002328:	4655      	mov	r5, sl
 800232a:	e07f      	b.n	800242c <_realloc_r+0x1c8>
 800232c:	2200      	movs	r2, #0
 800232e:	4613      	mov	r3, r2
 8002330:	07e8      	lsls	r0, r5, #31
 8002332:	f100 80e5 	bmi.w	8002500 <_realloc_r+0x29c>
 8002336:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800233a:	ebaa 0505 	sub.w	r5, sl, r5
 800233e:	6868      	ldr	r0, [r5, #4]
 8002340:	f020 0003 	bic.w	r0, r0, #3
 8002344:	eb00 0b06 	add.w	fp, r0, r6
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80a5 	beq.w	8002498 <_realloc_r+0x234>
 800234e:	459c      	cmp	ip, r3
 8002350:	eb02 070b 	add.w	r7, r2, fp
 8002354:	d14a      	bne.n	80023ec <_realloc_r+0x188>
 8002356:	f108 0310 	add.w	r3, r8, #16
 800235a:	42bb      	cmp	r3, r7
 800235c:	f300 809c 	bgt.w	8002498 <_realloc_r+0x234>
 8002360:	46ab      	mov	fp, r5
 8002362:	68eb      	ldr	r3, [r5, #12]
 8002364:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8002368:	60d3      	str	r3, [r2, #12]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	1f32      	subs	r2, r6, #4
 800236e:	2a24      	cmp	r2, #36	; 0x24
 8002370:	d837      	bhi.n	80023e2 <_realloc_r+0x17e>
 8002372:	2a13      	cmp	r2, #19
 8002374:	d933      	bls.n	80023de <_realloc_r+0x17a>
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	60ab      	str	r3, [r5, #8]
 800237a:	6863      	ldr	r3, [r4, #4]
 800237c:	60eb      	str	r3, [r5, #12]
 800237e:	2a1b      	cmp	r2, #27
 8002380:	d81b      	bhi.n	80023ba <_realloc_r+0x156>
 8002382:	3408      	adds	r4, #8
 8002384:	f105 0310 	add.w	r3, r5, #16
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	6862      	ldr	r2, [r4, #4]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	68a2      	ldr	r2, [r4, #8]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	eb05 0308 	add.w	r3, r5, r8
 8002398:	9a01      	ldr	r2, [sp, #4]
 800239a:	eba7 0708 	sub.w	r7, r7, r8
 800239e:	f047 0701 	orr.w	r7, r7, #1
 80023a2:	6093      	str	r3, [r2, #8]
 80023a4:	605f      	str	r7, [r3, #4]
 80023a6:	686b      	ldr	r3, [r5, #4]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	ea43 0308 	orr.w	r3, r3, r8
 80023b0:	606b      	str	r3, [r5, #4]
 80023b2:	4648      	mov	r0, r9
 80023b4:	f7ff ff50 	bl	8002258 <__malloc_unlock>
 80023b8:	e770      	b.n	800229c <_realloc_r+0x38>
 80023ba:	68a3      	ldr	r3, [r4, #8]
 80023bc:	612b      	str	r3, [r5, #16]
 80023be:	68e3      	ldr	r3, [r4, #12]
 80023c0:	616b      	str	r3, [r5, #20]
 80023c2:	2a24      	cmp	r2, #36	; 0x24
 80023c4:	bf01      	itttt	eq
 80023c6:	6923      	ldreq	r3, [r4, #16]
 80023c8:	61ab      	streq	r3, [r5, #24]
 80023ca:	6962      	ldreq	r2, [r4, #20]
 80023cc:	61ea      	streq	r2, [r5, #28]
 80023ce:	bf19      	ittee	ne
 80023d0:	3410      	addne	r4, #16
 80023d2:	f105 0318 	addne.w	r3, r5, #24
 80023d6:	f105 0320 	addeq.w	r3, r5, #32
 80023da:	3418      	addeq	r4, #24
 80023dc:	e7d4      	b.n	8002388 <_realloc_r+0x124>
 80023de:	465b      	mov	r3, fp
 80023e0:	e7d2      	b.n	8002388 <_realloc_r+0x124>
 80023e2:	4621      	mov	r1, r4
 80023e4:	4658      	mov	r0, fp
 80023e6:	f7ff ff17 	bl	8002218 <memmove>
 80023ea:	e7d3      	b.n	8002394 <_realloc_r+0x130>
 80023ec:	45b8      	cmp	r8, r7
 80023ee:	dc53      	bgt.n	8002498 <_realloc_r+0x234>
 80023f0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80023f4:	4628      	mov	r0, r5
 80023f6:	60da      	str	r2, [r3, #12]
 80023f8:	6093      	str	r3, [r2, #8]
 80023fa:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80023fe:	68eb      	ldr	r3, [r5, #12]
 8002400:	60d3      	str	r3, [r2, #12]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	1f32      	subs	r2, r6, #4
 8002406:	2a24      	cmp	r2, #36	; 0x24
 8002408:	d842      	bhi.n	8002490 <_realloc_r+0x22c>
 800240a:	2a13      	cmp	r2, #19
 800240c:	d908      	bls.n	8002420 <_realloc_r+0x1bc>
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	60ab      	str	r3, [r5, #8]
 8002412:	6863      	ldr	r3, [r4, #4]
 8002414:	60eb      	str	r3, [r5, #12]
 8002416:	2a1b      	cmp	r2, #27
 8002418:	d828      	bhi.n	800246c <_realloc_r+0x208>
 800241a:	3408      	adds	r4, #8
 800241c:	f105 0010 	add.w	r0, r5, #16
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	6003      	str	r3, [r0, #0]
 8002424:	6863      	ldr	r3, [r4, #4]
 8002426:	6043      	str	r3, [r0, #4]
 8002428:	68a3      	ldr	r3, [r4, #8]
 800242a:	6083      	str	r3, [r0, #8]
 800242c:	686a      	ldr	r2, [r5, #4]
 800242e:	eba7 0008 	sub.w	r0, r7, r8
 8002432:	280f      	cmp	r0, #15
 8002434:	f002 0201 	and.w	r2, r2, #1
 8002438:	eb05 0307 	add.w	r3, r5, r7
 800243c:	f240 80af 	bls.w	800259e <_realloc_r+0x33a>
 8002440:	eb05 0108 	add.w	r1, r5, r8
 8002444:	ea48 0202 	orr.w	r2, r8, r2
 8002448:	f040 0001 	orr.w	r0, r0, #1
 800244c:	606a      	str	r2, [r5, #4]
 800244e:	6048      	str	r0, [r1, #4]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	3108      	adds	r1, #8
 800245a:	4648      	mov	r0, r9
 800245c:	f000 fb20 	bl	8002aa0 <_free_r>
 8002460:	4648      	mov	r0, r9
 8002462:	f7ff fef9 	bl	8002258 <__malloc_unlock>
 8002466:	f105 0b08 	add.w	fp, r5, #8
 800246a:	e717      	b.n	800229c <_realloc_r+0x38>
 800246c:	68a3      	ldr	r3, [r4, #8]
 800246e:	612b      	str	r3, [r5, #16]
 8002470:	68e3      	ldr	r3, [r4, #12]
 8002472:	616b      	str	r3, [r5, #20]
 8002474:	2a24      	cmp	r2, #36	; 0x24
 8002476:	bf01      	itttt	eq
 8002478:	6923      	ldreq	r3, [r4, #16]
 800247a:	61ab      	streq	r3, [r5, #24]
 800247c:	6963      	ldreq	r3, [r4, #20]
 800247e:	61eb      	streq	r3, [r5, #28]
 8002480:	bf19      	ittee	ne
 8002482:	3410      	addne	r4, #16
 8002484:	f105 0018 	addne.w	r0, r5, #24
 8002488:	f105 0020 	addeq.w	r0, r5, #32
 800248c:	3418      	addeq	r4, #24
 800248e:	e7c7      	b.n	8002420 <_realloc_r+0x1bc>
 8002490:	4621      	mov	r1, r4
 8002492:	f7ff fec1 	bl	8002218 <memmove>
 8002496:	e7c9      	b.n	800242c <_realloc_r+0x1c8>
 8002498:	45d8      	cmp	r8, fp
 800249a:	dc31      	bgt.n	8002500 <_realloc_r+0x29c>
 800249c:	4628      	mov	r0, r5
 800249e:	68eb      	ldr	r3, [r5, #12]
 80024a0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80024a4:	60d3      	str	r3, [r2, #12]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	1f32      	subs	r2, r6, #4
 80024aa:	2a24      	cmp	r2, #36	; 0x24
 80024ac:	d824      	bhi.n	80024f8 <_realloc_r+0x294>
 80024ae:	2a13      	cmp	r2, #19
 80024b0:	d908      	bls.n	80024c4 <_realloc_r+0x260>
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	60ab      	str	r3, [r5, #8]
 80024b6:	6863      	ldr	r3, [r4, #4]
 80024b8:	60eb      	str	r3, [r5, #12]
 80024ba:	2a1b      	cmp	r2, #27
 80024bc:	d80a      	bhi.n	80024d4 <_realloc_r+0x270>
 80024be:	3408      	adds	r4, #8
 80024c0:	f105 0010 	add.w	r0, r5, #16
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	6003      	str	r3, [r0, #0]
 80024c8:	6863      	ldr	r3, [r4, #4]
 80024ca:	6043      	str	r3, [r0, #4]
 80024cc:	68a3      	ldr	r3, [r4, #8]
 80024ce:	6083      	str	r3, [r0, #8]
 80024d0:	465f      	mov	r7, fp
 80024d2:	e7ab      	b.n	800242c <_realloc_r+0x1c8>
 80024d4:	68a3      	ldr	r3, [r4, #8]
 80024d6:	612b      	str	r3, [r5, #16]
 80024d8:	68e3      	ldr	r3, [r4, #12]
 80024da:	616b      	str	r3, [r5, #20]
 80024dc:	2a24      	cmp	r2, #36	; 0x24
 80024de:	bf01      	itttt	eq
 80024e0:	6923      	ldreq	r3, [r4, #16]
 80024e2:	61ab      	streq	r3, [r5, #24]
 80024e4:	6963      	ldreq	r3, [r4, #20]
 80024e6:	61eb      	streq	r3, [r5, #28]
 80024e8:	bf19      	ittee	ne
 80024ea:	3410      	addne	r4, #16
 80024ec:	f105 0018 	addne.w	r0, r5, #24
 80024f0:	f105 0020 	addeq.w	r0, r5, #32
 80024f4:	3418      	addeq	r4, #24
 80024f6:	e7e5      	b.n	80024c4 <_realloc_r+0x260>
 80024f8:	4621      	mov	r1, r4
 80024fa:	f7ff fe8d 	bl	8002218 <memmove>
 80024fe:	e7e7      	b.n	80024d0 <_realloc_r+0x26c>
 8002500:	4648      	mov	r0, r9
 8002502:	f7ff fc39 	bl	8001d78 <_malloc_r>
 8002506:	4683      	mov	fp, r0
 8002508:	2800      	cmp	r0, #0
 800250a:	f43f af52 	beq.w	80023b2 <_realloc_r+0x14e>
 800250e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	4453      	add	r3, sl
 8002518:	f1a0 0208 	sub.w	r2, r0, #8
 800251c:	4293      	cmp	r3, r2
 800251e:	d105      	bne.n	800252c <_realloc_r+0x2c8>
 8002520:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8002524:	f027 0703 	bic.w	r7, r7, #3
 8002528:	4437      	add	r7, r6
 800252a:	e6fd      	b.n	8002328 <_realloc_r+0xc4>
 800252c:	1f32      	subs	r2, r6, #4
 800252e:	2a24      	cmp	r2, #36	; 0x24
 8002530:	d82f      	bhi.n	8002592 <_realloc_r+0x32e>
 8002532:	2a13      	cmp	r2, #19
 8002534:	d92a      	bls.n	800258c <_realloc_r+0x328>
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	6003      	str	r3, [r0, #0]
 800253a:	6863      	ldr	r3, [r4, #4]
 800253c:	6043      	str	r3, [r0, #4]
 800253e:	2a1b      	cmp	r2, #27
 8002540:	d810      	bhi.n	8002564 <_realloc_r+0x300>
 8002542:	f104 0208 	add.w	r2, r4, #8
 8002546:	f100 0308 	add.w	r3, r0, #8
 800254a:	6811      	ldr	r1, [r2, #0]
 800254c:	6019      	str	r1, [r3, #0]
 800254e:	6851      	ldr	r1, [r2, #4]
 8002550:	6059      	str	r1, [r3, #4]
 8002552:	6892      	ldr	r2, [r2, #8]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	4621      	mov	r1, r4
 8002558:	4648      	mov	r0, r9
 800255a:	f000 faa1 	bl	8002aa0 <_free_r>
 800255e:	e728      	b.n	80023b2 <_realloc_r+0x14e>
 8002560:	20000444 	.word	0x20000444
 8002564:	68a3      	ldr	r3, [r4, #8]
 8002566:	6083      	str	r3, [r0, #8]
 8002568:	68e3      	ldr	r3, [r4, #12]
 800256a:	60c3      	str	r3, [r0, #12]
 800256c:	2a24      	cmp	r2, #36	; 0x24
 800256e:	bf01      	itttt	eq
 8002570:	6923      	ldreq	r3, [r4, #16]
 8002572:	6103      	streq	r3, [r0, #16]
 8002574:	6961      	ldreq	r1, [r4, #20]
 8002576:	6141      	streq	r1, [r0, #20]
 8002578:	bf19      	ittee	ne
 800257a:	f104 0210 	addne.w	r2, r4, #16
 800257e:	f100 0310 	addne.w	r3, r0, #16
 8002582:	f104 0218 	addeq.w	r2, r4, #24
 8002586:	f100 0318 	addeq.w	r3, r0, #24
 800258a:	e7de      	b.n	800254a <_realloc_r+0x2e6>
 800258c:	4603      	mov	r3, r0
 800258e:	4622      	mov	r2, r4
 8002590:	e7db      	b.n	800254a <_realloc_r+0x2e6>
 8002592:	4621      	mov	r1, r4
 8002594:	f7ff fe40 	bl	8002218 <memmove>
 8002598:	e7dd      	b.n	8002556 <_realloc_r+0x2f2>
 800259a:	4637      	mov	r7, r6
 800259c:	e6c4      	b.n	8002328 <_realloc_r+0xc4>
 800259e:	4317      	orrs	r7, r2
 80025a0:	606f      	str	r7, [r5, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	e759      	b.n	8002460 <_realloc_r+0x1fc>

080025ac <_sbrk_r>:
 80025ac:	b538      	push	{r3, r4, r5, lr}
 80025ae:	4d06      	ldr	r5, [pc, #24]	; (80025c8 <_sbrk_r+0x1c>)
 80025b0:	2300      	movs	r3, #0
 80025b2:	4604      	mov	r4, r0
 80025b4:	4608      	mov	r0, r1
 80025b6:	602b      	str	r3, [r5, #0]
 80025b8:	f7ff f8fe 	bl	80017b8 <_sbrk>
 80025bc:	1c43      	adds	r3, r0, #1
 80025be:	d102      	bne.n	80025c6 <_sbrk_r+0x1a>
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	b103      	cbz	r3, 80025c6 <_sbrk_r+0x1a>
 80025c4:	6023      	str	r3, [r4, #0]
 80025c6:	bd38      	pop	{r3, r4, r5, pc}
 80025c8:	200009a8 	.word	0x200009a8

080025cc <__sread>:
 80025cc:	b510      	push	{r4, lr}
 80025ce:	460c      	mov	r4, r1
 80025d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025d4:	f000 fba2 	bl	8002d1c <_read_r>
 80025d8:	2800      	cmp	r0, #0
 80025da:	bfab      	itete	ge
 80025dc:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80025de:	89a3      	ldrhlt	r3, [r4, #12]
 80025e0:	181b      	addge	r3, r3, r0
 80025e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025e6:	bfac      	ite	ge
 80025e8:	6523      	strge	r3, [r4, #80]	; 0x50
 80025ea:	81a3      	strhlt	r3, [r4, #12]
 80025ec:	bd10      	pop	{r4, pc}

080025ee <__swrite>:
 80025ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025f2:	461f      	mov	r7, r3
 80025f4:	898b      	ldrh	r3, [r1, #12]
 80025f6:	05db      	lsls	r3, r3, #23
 80025f8:	4605      	mov	r5, r0
 80025fa:	460c      	mov	r4, r1
 80025fc:	4616      	mov	r6, r2
 80025fe:	d505      	bpl.n	800260c <__swrite+0x1e>
 8002600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002604:	2302      	movs	r3, #2
 8002606:	2200      	movs	r2, #0
 8002608:	f000 fb0a 	bl	8002c20 <_lseek_r>
 800260c:	89a3      	ldrh	r3, [r4, #12]
 800260e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002616:	81a3      	strh	r3, [r4, #12]
 8002618:	4632      	mov	r2, r6
 800261a:	463b      	mov	r3, r7
 800261c:	4628      	mov	r0, r5
 800261e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002622:	f000 b823 	b.w	800266c <_write_r>

08002626 <__sseek>:
 8002626:	b510      	push	{r4, lr}
 8002628:	460c      	mov	r4, r1
 800262a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800262e:	f000 faf7 	bl	8002c20 <_lseek_r>
 8002632:	1c43      	adds	r3, r0, #1
 8002634:	89a3      	ldrh	r3, [r4, #12]
 8002636:	bf15      	itete	ne
 8002638:	6520      	strne	r0, [r4, #80]	; 0x50
 800263a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800263e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002642:	81a3      	strheq	r3, [r4, #12]
 8002644:	bf18      	it	ne
 8002646:	81a3      	strhne	r3, [r4, #12]
 8002648:	bd10      	pop	{r4, pc}

0800264a <__sclose>:
 800264a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800264e:	f000 b8b7 	b.w	80027c0 <_close_r>

08002652 <sysconf>:
 8002652:	2808      	cmp	r0, #8
 8002654:	b508      	push	{r3, lr}
 8002656:	d006      	beq.n	8002666 <sysconf+0x14>
 8002658:	f7ff f90e 	bl	8001878 <__errno>
 800265c:	2316      	movs	r3, #22
 800265e:	6003      	str	r3, [r0, #0]
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	bd08      	pop	{r3, pc}
 8002666:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800266a:	e7fb      	b.n	8002664 <sysconf+0x12>

0800266c <_write_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	4d07      	ldr	r5, [pc, #28]	; (800268c <_write_r+0x20>)
 8002670:	4604      	mov	r4, r0
 8002672:	4608      	mov	r0, r1
 8002674:	4611      	mov	r1, r2
 8002676:	2200      	movs	r2, #0
 8002678:	602a      	str	r2, [r5, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	f000 fc32 	bl	8002ee4 <_write>
 8002680:	1c43      	adds	r3, r0, #1
 8002682:	d102      	bne.n	800268a <_write_r+0x1e>
 8002684:	682b      	ldr	r3, [r5, #0]
 8002686:	b103      	cbz	r3, 800268a <_write_r+0x1e>
 8002688:	6023      	str	r3, [r4, #0]
 800268a:	bd38      	pop	{r3, r4, r5, pc}
 800268c:	200009a8 	.word	0x200009a8

08002690 <__swsetup_r>:
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4b2a      	ldr	r3, [pc, #168]	; (800273c <__swsetup_r+0xac>)
 8002694:	4605      	mov	r5, r0
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	460c      	mov	r4, r1
 800269a:	b118      	cbz	r0, 80026a4 <__swsetup_r+0x14>
 800269c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800269e:	b90b      	cbnz	r3, 80026a4 <__swsetup_r+0x14>
 80026a0:	f7ff f9c0 	bl	8001a24 <__sinit>
 80026a4:	89a3      	ldrh	r3, [r4, #12]
 80026a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026aa:	0718      	lsls	r0, r3, #28
 80026ac:	d422      	bmi.n	80026f4 <__swsetup_r+0x64>
 80026ae:	06d9      	lsls	r1, r3, #27
 80026b0:	d407      	bmi.n	80026c2 <__swsetup_r+0x32>
 80026b2:	2309      	movs	r3, #9
 80026b4:	602b      	str	r3, [r5, #0]
 80026b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80026ba:	81a3      	strh	r3, [r4, #12]
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	e034      	b.n	800272c <__swsetup_r+0x9c>
 80026c2:	0758      	lsls	r0, r3, #29
 80026c4:	d512      	bpl.n	80026ec <__swsetup_r+0x5c>
 80026c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80026c8:	b141      	cbz	r1, 80026dc <__swsetup_r+0x4c>
 80026ca:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80026ce:	4299      	cmp	r1, r3
 80026d0:	d002      	beq.n	80026d8 <__swsetup_r+0x48>
 80026d2:	4628      	mov	r0, r5
 80026d4:	f000 f9e4 	bl	8002aa0 <_free_r>
 80026d8:	2300      	movs	r3, #0
 80026da:	6323      	str	r3, [r4, #48]	; 0x30
 80026dc:	89a3      	ldrh	r3, [r4, #12]
 80026de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80026e2:	81a3      	strh	r3, [r4, #12]
 80026e4:	2300      	movs	r3, #0
 80026e6:	6063      	str	r3, [r4, #4]
 80026e8:	6923      	ldr	r3, [r4, #16]
 80026ea:	6023      	str	r3, [r4, #0]
 80026ec:	89a3      	ldrh	r3, [r4, #12]
 80026ee:	f043 0308 	orr.w	r3, r3, #8
 80026f2:	81a3      	strh	r3, [r4, #12]
 80026f4:	6923      	ldr	r3, [r4, #16]
 80026f6:	b94b      	cbnz	r3, 800270c <__swsetup_r+0x7c>
 80026f8:	89a3      	ldrh	r3, [r4, #12]
 80026fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80026fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002702:	d003      	beq.n	800270c <__swsetup_r+0x7c>
 8002704:	4621      	mov	r1, r4
 8002706:	4628      	mov	r0, r5
 8002708:	f000 fac8 	bl	8002c9c <__smakebuf_r>
 800270c:	89a0      	ldrh	r0, [r4, #12]
 800270e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002712:	f010 0301 	ands.w	r3, r0, #1
 8002716:	d00a      	beq.n	800272e <__swsetup_r+0x9e>
 8002718:	2300      	movs	r3, #0
 800271a:	60a3      	str	r3, [r4, #8]
 800271c:	6963      	ldr	r3, [r4, #20]
 800271e:	425b      	negs	r3, r3
 8002720:	61a3      	str	r3, [r4, #24]
 8002722:	6923      	ldr	r3, [r4, #16]
 8002724:	b943      	cbnz	r3, 8002738 <__swsetup_r+0xa8>
 8002726:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800272a:	d1c4      	bne.n	80026b6 <__swsetup_r+0x26>
 800272c:	bd38      	pop	{r3, r4, r5, pc}
 800272e:	0781      	lsls	r1, r0, #30
 8002730:	bf58      	it	pl
 8002732:	6963      	ldrpl	r3, [r4, #20]
 8002734:	60a3      	str	r3, [r4, #8]
 8002736:	e7f4      	b.n	8002722 <__swsetup_r+0x92>
 8002738:	2000      	movs	r0, #0
 800273a:	e7f7      	b.n	800272c <__swsetup_r+0x9c>
 800273c:	20000014 	.word	0x20000014

08002740 <__register_exitproc>:
 8002740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002744:	4d1c      	ldr	r5, [pc, #112]	; (80027b8 <__register_exitproc+0x78>)
 8002746:	4606      	mov	r6, r0
 8002748:	6828      	ldr	r0, [r5, #0]
 800274a:	4698      	mov	r8, r3
 800274c:	460f      	mov	r7, r1
 800274e:	4691      	mov	r9, r2
 8002750:	f7ff fb0f 	bl	8001d72 <__retarget_lock_acquire_recursive>
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <__register_exitproc+0x7c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800275c:	4628      	mov	r0, r5
 800275e:	b91c      	cbnz	r4, 8002768 <__register_exitproc+0x28>
 8002760:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8002764:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8002768:	6865      	ldr	r5, [r4, #4]
 800276a:	6800      	ldr	r0, [r0, #0]
 800276c:	2d1f      	cmp	r5, #31
 800276e:	dd05      	ble.n	800277c <__register_exitproc+0x3c>
 8002770:	f7ff fb00 	bl	8001d74 <__retarget_lock_release_recursive>
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800277c:	b19e      	cbz	r6, 80027a6 <__register_exitproc+0x66>
 800277e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8002782:	2201      	movs	r2, #1
 8002784:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8002788:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800278c:	40aa      	lsls	r2, r5
 800278e:	4313      	orrs	r3, r2
 8002790:	2e02      	cmp	r6, #2
 8002792:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8002796:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800279a:	bf02      	ittt	eq
 800279c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80027a0:	431a      	orreq	r2, r3
 80027a2:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 80027a6:	1c6b      	adds	r3, r5, #1
 80027a8:	3502      	adds	r5, #2
 80027aa:	6063      	str	r3, [r4, #4]
 80027ac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80027b0:	f7ff fae0 	bl	8001d74 <__retarget_lock_release_recursive>
 80027b4:	2000      	movs	r0, #0
 80027b6:	e7df      	b.n	8002778 <__register_exitproc+0x38>
 80027b8:	20000440 	.word	0x20000440
 80027bc:	08003370 	.word	0x08003370

080027c0 <_close_r>:
 80027c0:	b538      	push	{r3, r4, r5, lr}
 80027c2:	4d06      	ldr	r5, [pc, #24]	; (80027dc <_close_r+0x1c>)
 80027c4:	2300      	movs	r3, #0
 80027c6:	4604      	mov	r4, r0
 80027c8:	4608      	mov	r0, r1
 80027ca:	602b      	str	r3, [r5, #0]
 80027cc:	f000 fbb8 	bl	8002f40 <_close>
 80027d0:	1c43      	adds	r3, r0, #1
 80027d2:	d102      	bne.n	80027da <_close_r+0x1a>
 80027d4:	682b      	ldr	r3, [r5, #0]
 80027d6:	b103      	cbz	r3, 80027da <_close_r+0x1a>
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	bd38      	pop	{r3, r4, r5, pc}
 80027dc:	200009a8 	.word	0x200009a8

080027e0 <_fclose_r>:
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	4606      	mov	r6, r0
 80027e4:	460c      	mov	r4, r1
 80027e6:	b911      	cbnz	r1, 80027ee <_fclose_r+0xe>
 80027e8:	2500      	movs	r5, #0
 80027ea:	4628      	mov	r0, r5
 80027ec:	bd70      	pop	{r4, r5, r6, pc}
 80027ee:	b118      	cbz	r0, 80027f8 <_fclose_r+0x18>
 80027f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80027f2:	b90b      	cbnz	r3, 80027f8 <_fclose_r+0x18>
 80027f4:	f7ff f916 	bl	8001a24 <__sinit>
 80027f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027fa:	07d8      	lsls	r0, r3, #31
 80027fc:	d405      	bmi.n	800280a <_fclose_r+0x2a>
 80027fe:	89a3      	ldrh	r3, [r4, #12]
 8002800:	0599      	lsls	r1, r3, #22
 8002802:	d402      	bmi.n	800280a <_fclose_r+0x2a>
 8002804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002806:	f7ff fab4 	bl	8001d72 <__retarget_lock_acquire_recursive>
 800280a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800280e:	b93b      	cbnz	r3, 8002820 <_fclose_r+0x40>
 8002810:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002812:	f015 0501 	ands.w	r5, r5, #1
 8002816:	d1e7      	bne.n	80027e8 <_fclose_r+0x8>
 8002818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800281a:	f7ff faab 	bl	8001d74 <__retarget_lock_release_recursive>
 800281e:	e7e4      	b.n	80027ea <_fclose_r+0xa>
 8002820:	4621      	mov	r1, r4
 8002822:	4630      	mov	r0, r6
 8002824:	f000 f834 	bl	8002890 <__sflush_r>
 8002828:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800282a:	4605      	mov	r5, r0
 800282c:	b133      	cbz	r3, 800283c <_fclose_r+0x5c>
 800282e:	69e1      	ldr	r1, [r4, #28]
 8002830:	4630      	mov	r0, r6
 8002832:	4798      	blx	r3
 8002834:	2800      	cmp	r0, #0
 8002836:	bfb8      	it	lt
 8002838:	f04f 35ff 	movlt.w	r5, #4294967295
 800283c:	89a3      	ldrh	r3, [r4, #12]
 800283e:	061a      	lsls	r2, r3, #24
 8002840:	d503      	bpl.n	800284a <_fclose_r+0x6a>
 8002842:	6921      	ldr	r1, [r4, #16]
 8002844:	4630      	mov	r0, r6
 8002846:	f000 f92b 	bl	8002aa0 <_free_r>
 800284a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800284c:	b141      	cbz	r1, 8002860 <_fclose_r+0x80>
 800284e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8002852:	4299      	cmp	r1, r3
 8002854:	d002      	beq.n	800285c <_fclose_r+0x7c>
 8002856:	4630      	mov	r0, r6
 8002858:	f000 f922 	bl	8002aa0 <_free_r>
 800285c:	2300      	movs	r3, #0
 800285e:	6323      	str	r3, [r4, #48]	; 0x30
 8002860:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002862:	b121      	cbz	r1, 800286e <_fclose_r+0x8e>
 8002864:	4630      	mov	r0, r6
 8002866:	f000 f91b 	bl	8002aa0 <_free_r>
 800286a:	2300      	movs	r3, #0
 800286c:	6463      	str	r3, [r4, #68]	; 0x44
 800286e:	f7ff f8c1 	bl	80019f4 <__sfp_lock_acquire>
 8002872:	2300      	movs	r3, #0
 8002874:	81a3      	strh	r3, [r4, #12]
 8002876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002878:	07db      	lsls	r3, r3, #31
 800287a:	d402      	bmi.n	8002882 <_fclose_r+0xa2>
 800287c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800287e:	f7ff fa79 	bl	8001d74 <__retarget_lock_release_recursive>
 8002882:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002884:	f7ff fa74 	bl	8001d70 <__retarget_lock_close_recursive>
 8002888:	f7ff f8ba 	bl	8001a00 <__sfp_lock_release>
 800288c:	e7ad      	b.n	80027ea <_fclose_r+0xa>
	...

08002890 <__sflush_r>:
 8002890:	898b      	ldrh	r3, [r1, #12]
 8002892:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800289a:	4605      	mov	r5, r0
 800289c:	0718      	lsls	r0, r3, #28
 800289e:	460c      	mov	r4, r1
 80028a0:	d45f      	bmi.n	8002962 <__sflush_r+0xd2>
 80028a2:	684b      	ldr	r3, [r1, #4]
 80028a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	818a      	strh	r2, [r1, #12]
 80028ac:	dc05      	bgt.n	80028ba <__sflush_r+0x2a>
 80028ae:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	dc02      	bgt.n	80028ba <__sflush_r+0x2a>
 80028b4:	2000      	movs	r0, #0
 80028b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028bc:	2e00      	cmp	r6, #0
 80028be:	d0f9      	beq.n	80028b4 <__sflush_r+0x24>
 80028c0:	2300      	movs	r3, #0
 80028c2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028c6:	682f      	ldr	r7, [r5, #0]
 80028c8:	602b      	str	r3, [r5, #0]
 80028ca:	d036      	beq.n	800293a <__sflush_r+0xaa>
 80028cc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	075a      	lsls	r2, r3, #29
 80028d2:	d505      	bpl.n	80028e0 <__sflush_r+0x50>
 80028d4:	6863      	ldr	r3, [r4, #4]
 80028d6:	1ac0      	subs	r0, r0, r3
 80028d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028da:	b10b      	cbz	r3, 80028e0 <__sflush_r+0x50>
 80028dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028de:	1ac0      	subs	r0, r0, r3
 80028e0:	2300      	movs	r3, #0
 80028e2:	4602      	mov	r2, r0
 80028e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028e6:	69e1      	ldr	r1, [r4, #28]
 80028e8:	4628      	mov	r0, r5
 80028ea:	47b0      	blx	r6
 80028ec:	1c43      	adds	r3, r0, #1
 80028ee:	89a3      	ldrh	r3, [r4, #12]
 80028f0:	d106      	bne.n	8002900 <__sflush_r+0x70>
 80028f2:	6829      	ldr	r1, [r5, #0]
 80028f4:	291d      	cmp	r1, #29
 80028f6:	d830      	bhi.n	800295a <__sflush_r+0xca>
 80028f8:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <__sflush_r+0x118>)
 80028fa:	40ca      	lsrs	r2, r1
 80028fc:	07d6      	lsls	r6, r2, #31
 80028fe:	d52c      	bpl.n	800295a <__sflush_r+0xca>
 8002900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002904:	b21b      	sxth	r3, r3
 8002906:	2200      	movs	r2, #0
 8002908:	6062      	str	r2, [r4, #4]
 800290a:	04d9      	lsls	r1, r3, #19
 800290c:	6922      	ldr	r2, [r4, #16]
 800290e:	81a3      	strh	r3, [r4, #12]
 8002910:	6022      	str	r2, [r4, #0]
 8002912:	d504      	bpl.n	800291e <__sflush_r+0x8e>
 8002914:	1c42      	adds	r2, r0, #1
 8002916:	d101      	bne.n	800291c <__sflush_r+0x8c>
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	b903      	cbnz	r3, 800291e <__sflush_r+0x8e>
 800291c:	6520      	str	r0, [r4, #80]	; 0x50
 800291e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002920:	602f      	str	r7, [r5, #0]
 8002922:	2900      	cmp	r1, #0
 8002924:	d0c6      	beq.n	80028b4 <__sflush_r+0x24>
 8002926:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800292a:	4299      	cmp	r1, r3
 800292c:	d002      	beq.n	8002934 <__sflush_r+0xa4>
 800292e:	4628      	mov	r0, r5
 8002930:	f000 f8b6 	bl	8002aa0 <_free_r>
 8002934:	2000      	movs	r0, #0
 8002936:	6320      	str	r0, [r4, #48]	; 0x30
 8002938:	e7bd      	b.n	80028b6 <__sflush_r+0x26>
 800293a:	69e1      	ldr	r1, [r4, #28]
 800293c:	2301      	movs	r3, #1
 800293e:	4628      	mov	r0, r5
 8002940:	47b0      	blx	r6
 8002942:	1c41      	adds	r1, r0, #1
 8002944:	d1c3      	bne.n	80028ce <__sflush_r+0x3e>
 8002946:	682b      	ldr	r3, [r5, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0c0      	beq.n	80028ce <__sflush_r+0x3e>
 800294c:	2b1d      	cmp	r3, #29
 800294e:	d001      	beq.n	8002954 <__sflush_r+0xc4>
 8002950:	2b16      	cmp	r3, #22
 8002952:	d101      	bne.n	8002958 <__sflush_r+0xc8>
 8002954:	602f      	str	r7, [r5, #0]
 8002956:	e7ad      	b.n	80028b4 <__sflush_r+0x24>
 8002958:	89a3      	ldrh	r3, [r4, #12]
 800295a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800295e:	81a3      	strh	r3, [r4, #12]
 8002960:	e7a9      	b.n	80028b6 <__sflush_r+0x26>
 8002962:	690f      	ldr	r7, [r1, #16]
 8002964:	2f00      	cmp	r7, #0
 8002966:	d0a5      	beq.n	80028b4 <__sflush_r+0x24>
 8002968:	079b      	lsls	r3, r3, #30
 800296a:	680e      	ldr	r6, [r1, #0]
 800296c:	bf08      	it	eq
 800296e:	694b      	ldreq	r3, [r1, #20]
 8002970:	600f      	str	r7, [r1, #0]
 8002972:	bf18      	it	ne
 8002974:	2300      	movne	r3, #0
 8002976:	eba6 0807 	sub.w	r8, r6, r7
 800297a:	608b      	str	r3, [r1, #8]
 800297c:	f1b8 0f00 	cmp.w	r8, #0
 8002980:	dd98      	ble.n	80028b4 <__sflush_r+0x24>
 8002982:	69e1      	ldr	r1, [r4, #28]
 8002984:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002986:	4643      	mov	r3, r8
 8002988:	463a      	mov	r2, r7
 800298a:	4628      	mov	r0, r5
 800298c:	47b0      	blx	r6
 800298e:	2800      	cmp	r0, #0
 8002990:	dc06      	bgt.n	80029a0 <__sflush_r+0x110>
 8002992:	89a3      	ldrh	r3, [r4, #12]
 8002994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002998:	81a3      	strh	r3, [r4, #12]
 800299a:	f04f 30ff 	mov.w	r0, #4294967295
 800299e:	e78a      	b.n	80028b6 <__sflush_r+0x26>
 80029a0:	4407      	add	r7, r0
 80029a2:	eba8 0800 	sub.w	r8, r8, r0
 80029a6:	e7e9      	b.n	800297c <__sflush_r+0xec>
 80029a8:	20400001 	.word	0x20400001

080029ac <_fflush_r>:
 80029ac:	b538      	push	{r3, r4, r5, lr}
 80029ae:	460c      	mov	r4, r1
 80029b0:	4605      	mov	r5, r0
 80029b2:	b118      	cbz	r0, 80029bc <_fflush_r+0x10>
 80029b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80029b6:	b90b      	cbnz	r3, 80029bc <_fflush_r+0x10>
 80029b8:	f7ff f834 	bl	8001a24 <__sinit>
 80029bc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80029c0:	b1b8      	cbz	r0, 80029f2 <_fflush_r+0x46>
 80029c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029c4:	07db      	lsls	r3, r3, #31
 80029c6:	d404      	bmi.n	80029d2 <_fflush_r+0x26>
 80029c8:	0581      	lsls	r1, r0, #22
 80029ca:	d402      	bmi.n	80029d2 <_fflush_r+0x26>
 80029cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ce:	f7ff f9d0 	bl	8001d72 <__retarget_lock_acquire_recursive>
 80029d2:	4628      	mov	r0, r5
 80029d4:	4621      	mov	r1, r4
 80029d6:	f7ff ff5b 	bl	8002890 <__sflush_r>
 80029da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029dc:	07da      	lsls	r2, r3, #31
 80029de:	4605      	mov	r5, r0
 80029e0:	d405      	bmi.n	80029ee <_fflush_r+0x42>
 80029e2:	89a3      	ldrh	r3, [r4, #12]
 80029e4:	059b      	lsls	r3, r3, #22
 80029e6:	d402      	bmi.n	80029ee <_fflush_r+0x42>
 80029e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ea:	f7ff f9c3 	bl	8001d74 <__retarget_lock_release_recursive>
 80029ee:	4628      	mov	r0, r5
 80029f0:	bd38      	pop	{r3, r4, r5, pc}
 80029f2:	4605      	mov	r5, r0
 80029f4:	e7fb      	b.n	80029ee <_fflush_r+0x42>
	...

080029f8 <_malloc_trim_r>:
 80029f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029fc:	4606      	mov	r6, r0
 80029fe:	2008      	movs	r0, #8
 8002a00:	460c      	mov	r4, r1
 8002a02:	f7ff fe26 	bl	8002652 <sysconf>
 8002a06:	4f23      	ldr	r7, [pc, #140]	; (8002a94 <_malloc_trim_r+0x9c>)
 8002a08:	4680      	mov	r8, r0
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	f7ff fc1e 	bl	800224c <__malloc_lock>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	685d      	ldr	r5, [r3, #4]
 8002a14:	f025 0503 	bic.w	r5, r5, #3
 8002a18:	1b2c      	subs	r4, r5, r4
 8002a1a:	3c11      	subs	r4, #17
 8002a1c:	4444      	add	r4, r8
 8002a1e:	fbb4 f4f8 	udiv	r4, r4, r8
 8002a22:	3c01      	subs	r4, #1
 8002a24:	fb08 f404 	mul.w	r4, r8, r4
 8002a28:	45a0      	cmp	r8, r4
 8002a2a:	dd05      	ble.n	8002a38 <_malloc_trim_r+0x40>
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f7ff fc13 	bl	8002258 <__malloc_unlock>
 8002a32:	2000      	movs	r0, #0
 8002a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4630      	mov	r0, r6
 8002a3c:	f7ff fdb6 	bl	80025ac <_sbrk_r>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	442b      	add	r3, r5
 8002a44:	4298      	cmp	r0, r3
 8002a46:	d1f1      	bne.n	8002a2c <_malloc_trim_r+0x34>
 8002a48:	4261      	negs	r1, r4
 8002a4a:	4630      	mov	r0, r6
 8002a4c:	f7ff fdae 	bl	80025ac <_sbrk_r>
 8002a50:	3001      	adds	r0, #1
 8002a52:	d110      	bne.n	8002a76 <_malloc_trim_r+0x7e>
 8002a54:	2100      	movs	r1, #0
 8002a56:	4630      	mov	r0, r6
 8002a58:	f7ff fda8 	bl	80025ac <_sbrk_r>
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	1a83      	subs	r3, r0, r2
 8002a60:	2b0f      	cmp	r3, #15
 8002a62:	dde3      	ble.n	8002a2c <_malloc_trim_r+0x34>
 8002a64:	490c      	ldr	r1, [pc, #48]	; (8002a98 <_malloc_trim_r+0xa0>)
 8002a66:	6809      	ldr	r1, [r1, #0]
 8002a68:	1a40      	subs	r0, r0, r1
 8002a6a:	490c      	ldr	r1, [pc, #48]	; (8002a9c <_malloc_trim_r+0xa4>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6008      	str	r0, [r1, #0]
 8002a72:	6053      	str	r3, [r2, #4]
 8002a74:	e7da      	b.n	8002a2c <_malloc_trim_r+0x34>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <_malloc_trim_r+0xa4>)
 8002a7a:	1b2d      	subs	r5, r5, r4
 8002a7c:	f045 0501 	orr.w	r5, r5, #1
 8002a80:	605d      	str	r5, [r3, #4]
 8002a82:	6813      	ldr	r3, [r2, #0]
 8002a84:	4630      	mov	r0, r6
 8002a86:	1b1c      	subs	r4, r3, r4
 8002a88:	6014      	str	r4, [r2, #0]
 8002a8a:	f7ff fbe5 	bl	8002258 <__malloc_unlock>
 8002a8e:	2001      	movs	r0, #1
 8002a90:	e7d0      	b.n	8002a34 <_malloc_trim_r+0x3c>
 8002a92:	bf00      	nop
 8002a94:	20000444 	.word	0x20000444
 8002a98:	2000084c 	.word	0x2000084c
 8002a9c:	20000894 	.word	0x20000894

08002aa0 <_free_r>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	4605      	mov	r5, r0
 8002aa4:	460f      	mov	r7, r1
 8002aa6:	2900      	cmp	r1, #0
 8002aa8:	f000 80b1 	beq.w	8002c0e <_free_r+0x16e>
 8002aac:	f7ff fbce 	bl	800224c <__malloc_lock>
 8002ab0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8002ab4:	4856      	ldr	r0, [pc, #344]	; (8002c10 <_free_r+0x170>)
 8002ab6:	f022 0401 	bic.w	r4, r2, #1
 8002aba:	f1a7 0308 	sub.w	r3, r7, #8
 8002abe:	eb03 0c04 	add.w	ip, r3, r4
 8002ac2:	6881      	ldr	r1, [r0, #8]
 8002ac4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8002ac8:	4561      	cmp	r1, ip
 8002aca:	f026 0603 	bic.w	r6, r6, #3
 8002ace:	f002 0201 	and.w	r2, r2, #1
 8002ad2:	d11b      	bne.n	8002b0c <_free_r+0x6c>
 8002ad4:	4434      	add	r4, r6
 8002ad6:	b93a      	cbnz	r2, 8002ae8 <_free_r+0x48>
 8002ad8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	4414      	add	r4, r2
 8002ae0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8002ae4:	60ca      	str	r2, [r1, #12]
 8002ae6:	6091      	str	r1, [r2, #8]
 8002ae8:	f044 0201 	orr.w	r2, r4, #1
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	6083      	str	r3, [r0, #8]
 8002af0:	4b48      	ldr	r3, [pc, #288]	; (8002c14 <_free_r+0x174>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	42a3      	cmp	r3, r4
 8002af6:	d804      	bhi.n	8002b02 <_free_r+0x62>
 8002af8:	4b47      	ldr	r3, [pc, #284]	; (8002c18 <_free_r+0x178>)
 8002afa:	4628      	mov	r0, r5
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	f7ff ff7b 	bl	80029f8 <_malloc_trim_r>
 8002b02:	4628      	mov	r0, r5
 8002b04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b08:	f7ff bba6 	b.w	8002258 <__malloc_unlock>
 8002b0c:	f8cc 6004 	str.w	r6, [ip, #4]
 8002b10:	2a00      	cmp	r2, #0
 8002b12:	d138      	bne.n	8002b86 <_free_r+0xe6>
 8002b14:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8002b18:	1a5b      	subs	r3, r3, r1
 8002b1a:	440c      	add	r4, r1
 8002b1c:	6899      	ldr	r1, [r3, #8]
 8002b1e:	f100 0708 	add.w	r7, r0, #8
 8002b22:	42b9      	cmp	r1, r7
 8002b24:	d031      	beq.n	8002b8a <_free_r+0xea>
 8002b26:	68df      	ldr	r7, [r3, #12]
 8002b28:	60cf      	str	r7, [r1, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	eb0c 0106 	add.w	r1, ip, r6
 8002b30:	6849      	ldr	r1, [r1, #4]
 8002b32:	07c9      	lsls	r1, r1, #31
 8002b34:	d40b      	bmi.n	8002b4e <_free_r+0xae>
 8002b36:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8002b3a:	4434      	add	r4, r6
 8002b3c:	bb3a      	cbnz	r2, 8002b8e <_free_r+0xee>
 8002b3e:	4e37      	ldr	r6, [pc, #220]	; (8002c1c <_free_r+0x17c>)
 8002b40:	42b1      	cmp	r1, r6
 8002b42:	d124      	bne.n	8002b8e <_free_r+0xee>
 8002b44:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b48:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f044 0101 	orr.w	r1, r4, #1
 8002b52:	6059      	str	r1, [r3, #4]
 8002b54:	511c      	str	r4, [r3, r4]
 8002b56:	2a00      	cmp	r2, #0
 8002b58:	d1d3      	bne.n	8002b02 <_free_r+0x62>
 8002b5a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8002b5e:	d21b      	bcs.n	8002b98 <_free_r+0xf8>
 8002b60:	0961      	lsrs	r1, r4, #5
 8002b62:	08e2      	lsrs	r2, r4, #3
 8002b64:	2401      	movs	r4, #1
 8002b66:	408c      	lsls	r4, r1
 8002b68:	6841      	ldr	r1, [r0, #4]
 8002b6a:	3201      	adds	r2, #1
 8002b6c:	430c      	orrs	r4, r1
 8002b6e:	6044      	str	r4, [r0, #4]
 8002b70:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8002b74:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8002b78:	3908      	subs	r1, #8
 8002b7a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8002b7e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8002b82:	60e3      	str	r3, [r4, #12]
 8002b84:	e7bd      	b.n	8002b02 <_free_r+0x62>
 8002b86:	2200      	movs	r2, #0
 8002b88:	e7d0      	b.n	8002b2c <_free_r+0x8c>
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	e7ce      	b.n	8002b2c <_free_r+0x8c>
 8002b8e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8002b92:	60ce      	str	r6, [r1, #12]
 8002b94:	60b1      	str	r1, [r6, #8]
 8002b96:	e7da      	b.n	8002b4e <_free_r+0xae>
 8002b98:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8002b9c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8002ba0:	d214      	bcs.n	8002bcc <_free_r+0x12c>
 8002ba2:	09a2      	lsrs	r2, r4, #6
 8002ba4:	3238      	adds	r2, #56	; 0x38
 8002ba6:	1c51      	adds	r1, r2, #1
 8002ba8:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8002bac:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8002bb0:	428e      	cmp	r6, r1
 8002bb2:	d125      	bne.n	8002c00 <_free_r+0x160>
 8002bb4:	2401      	movs	r4, #1
 8002bb6:	1092      	asrs	r2, r2, #2
 8002bb8:	fa04 f202 	lsl.w	r2, r4, r2
 8002bbc:	6844      	ldr	r4, [r0, #4]
 8002bbe:	4322      	orrs	r2, r4
 8002bc0:	6042      	str	r2, [r0, #4]
 8002bc2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8002bc6:	60b3      	str	r3, [r6, #8]
 8002bc8:	60cb      	str	r3, [r1, #12]
 8002bca:	e79a      	b.n	8002b02 <_free_r+0x62>
 8002bcc:	2a14      	cmp	r2, #20
 8002bce:	d801      	bhi.n	8002bd4 <_free_r+0x134>
 8002bd0:	325b      	adds	r2, #91	; 0x5b
 8002bd2:	e7e8      	b.n	8002ba6 <_free_r+0x106>
 8002bd4:	2a54      	cmp	r2, #84	; 0x54
 8002bd6:	d802      	bhi.n	8002bde <_free_r+0x13e>
 8002bd8:	0b22      	lsrs	r2, r4, #12
 8002bda:	326e      	adds	r2, #110	; 0x6e
 8002bdc:	e7e3      	b.n	8002ba6 <_free_r+0x106>
 8002bde:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8002be2:	d802      	bhi.n	8002bea <_free_r+0x14a>
 8002be4:	0be2      	lsrs	r2, r4, #15
 8002be6:	3277      	adds	r2, #119	; 0x77
 8002be8:	e7dd      	b.n	8002ba6 <_free_r+0x106>
 8002bea:	f240 5154 	movw	r1, #1364	; 0x554
 8002bee:	428a      	cmp	r2, r1
 8002bf0:	bf9a      	itte	ls
 8002bf2:	0ca2      	lsrls	r2, r4, #18
 8002bf4:	327c      	addls	r2, #124	; 0x7c
 8002bf6:	227e      	movhi	r2, #126	; 0x7e
 8002bf8:	e7d5      	b.n	8002ba6 <_free_r+0x106>
 8002bfa:	6889      	ldr	r1, [r1, #8]
 8002bfc:	428e      	cmp	r6, r1
 8002bfe:	d004      	beq.n	8002c0a <_free_r+0x16a>
 8002c00:	684a      	ldr	r2, [r1, #4]
 8002c02:	f022 0203 	bic.w	r2, r2, #3
 8002c06:	42a2      	cmp	r2, r4
 8002c08:	d8f7      	bhi.n	8002bfa <_free_r+0x15a>
 8002c0a:	68ce      	ldr	r6, [r1, #12]
 8002c0c:	e7d9      	b.n	8002bc2 <_free_r+0x122>
 8002c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c10:	20000444 	.word	0x20000444
 8002c14:	20000850 	.word	0x20000850
 8002c18:	200008c4 	.word	0x200008c4
 8002c1c:	2000044c 	.word	0x2000044c

08002c20 <_lseek_r>:
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	4d07      	ldr	r5, [pc, #28]	; (8002c40 <_lseek_r+0x20>)
 8002c24:	4604      	mov	r4, r0
 8002c26:	4608      	mov	r0, r1
 8002c28:	4611      	mov	r1, r2
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	602a      	str	r2, [r5, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f000 f946 	bl	8002ec0 <_lseek>
 8002c34:	1c43      	adds	r3, r0, #1
 8002c36:	d102      	bne.n	8002c3e <_lseek_r+0x1e>
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	b103      	cbz	r3, 8002c3e <_lseek_r+0x1e>
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	bd38      	pop	{r3, r4, r5, pc}
 8002c40:	200009a8 	.word	0x200009a8

08002c44 <__swhatbuf_r>:
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	460e      	mov	r6, r1
 8002c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	b096      	sub	sp, #88	; 0x58
 8002c50:	4614      	mov	r4, r2
 8002c52:	461d      	mov	r5, r3
 8002c54:	da09      	bge.n	8002c6a <__swhatbuf_r+0x26>
 8002c56:	89b3      	ldrh	r3, [r6, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002c5e:	602a      	str	r2, [r5, #0]
 8002c60:	d116      	bne.n	8002c90 <__swhatbuf_r+0x4c>
 8002c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c66:	6023      	str	r3, [r4, #0]
 8002c68:	e015      	b.n	8002c96 <__swhatbuf_r+0x52>
 8002c6a:	466a      	mov	r2, sp
 8002c6c:	f000 f868 	bl	8002d40 <_fstat_r>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	dbf0      	blt.n	8002c56 <__swhatbuf_r+0x12>
 8002c74:	9a01      	ldr	r2, [sp, #4]
 8002c76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c7e:	425a      	negs	r2, r3
 8002c80:	415a      	adcs	r2, r3
 8002c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c86:	602a      	str	r2, [r5, #0]
 8002c88:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c8c:	6023      	str	r3, [r4, #0]
 8002c8e:	e002      	b.n	8002c96 <__swhatbuf_r+0x52>
 8002c90:	2340      	movs	r3, #64	; 0x40
 8002c92:	6023      	str	r3, [r4, #0]
 8002c94:	4610      	mov	r0, r2
 8002c96:	b016      	add	sp, #88	; 0x58
 8002c98:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c9c <__smakebuf_r>:
 8002c9c:	898b      	ldrh	r3, [r1, #12]
 8002c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ca0:	079d      	lsls	r5, r3, #30
 8002ca2:	4606      	mov	r6, r0
 8002ca4:	460c      	mov	r4, r1
 8002ca6:	d507      	bpl.n	8002cb8 <__smakebuf_r+0x1c>
 8002ca8:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8002cac:	6023      	str	r3, [r4, #0]
 8002cae:	6123      	str	r3, [r4, #16]
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	6163      	str	r3, [r4, #20]
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}
 8002cb8:	ab01      	add	r3, sp, #4
 8002cba:	466a      	mov	r2, sp
 8002cbc:	f7ff ffc2 	bl	8002c44 <__swhatbuf_r>
 8002cc0:	9900      	ldr	r1, [sp, #0]
 8002cc2:	4605      	mov	r5, r0
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	f7ff f857 	bl	8001d78 <_malloc_r>
 8002cca:	b948      	cbnz	r0, 8002ce0 <__smakebuf_r+0x44>
 8002ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cd0:	059a      	lsls	r2, r3, #22
 8002cd2:	d4ef      	bmi.n	8002cb4 <__smakebuf_r+0x18>
 8002cd4:	f023 0303 	bic.w	r3, r3, #3
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	81a3      	strh	r3, [r4, #12]
 8002cde:	e7e3      	b.n	8002ca8 <__smakebuf_r+0xc>
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <__smakebuf_r+0x7c>)
 8002ce2:	63f3      	str	r3, [r6, #60]	; 0x3c
 8002ce4:	89a3      	ldrh	r3, [r4, #12]
 8002ce6:	6020      	str	r0, [r4, #0]
 8002ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cec:	81a3      	strh	r3, [r4, #12]
 8002cee:	9b00      	ldr	r3, [sp, #0]
 8002cf0:	6163      	str	r3, [r4, #20]
 8002cf2:	9b01      	ldr	r3, [sp, #4]
 8002cf4:	6120      	str	r0, [r4, #16]
 8002cf6:	b15b      	cbz	r3, 8002d10 <__smakebuf_r+0x74>
 8002cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	f000 f831 	bl	8002d64 <_isatty_r>
 8002d02:	b128      	cbz	r0, 8002d10 <__smakebuf_r+0x74>
 8002d04:	89a3      	ldrh	r3, [r4, #12]
 8002d06:	f023 0303 	bic.w	r3, r3, #3
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	81a3      	strh	r3, [r4, #12]
 8002d10:	89a0      	ldrh	r0, [r4, #12]
 8002d12:	4305      	orrs	r5, r0
 8002d14:	81a5      	strh	r5, [r4, #12]
 8002d16:	e7cd      	b.n	8002cb4 <__smakebuf_r+0x18>
 8002d18:	080019e9 	.word	0x080019e9

08002d1c <_read_r>:
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	4d07      	ldr	r5, [pc, #28]	; (8002d3c <_read_r+0x20>)
 8002d20:	4604      	mov	r4, r0
 8002d22:	4608      	mov	r0, r1
 8002d24:	4611      	mov	r1, r2
 8002d26:	2200      	movs	r2, #0
 8002d28:	602a      	str	r2, [r5, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f000 f872 	bl	8002e14 <_read>
 8002d30:	1c43      	adds	r3, r0, #1
 8002d32:	d102      	bne.n	8002d3a <_read_r+0x1e>
 8002d34:	682b      	ldr	r3, [r5, #0]
 8002d36:	b103      	cbz	r3, 8002d3a <_read_r+0x1e>
 8002d38:	6023      	str	r3, [r4, #0]
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}
 8002d3c:	200009a8 	.word	0x200009a8

08002d40 <_fstat_r>:
 8002d40:	b538      	push	{r3, r4, r5, lr}
 8002d42:	4d07      	ldr	r5, [pc, #28]	; (8002d60 <_fstat_r+0x20>)
 8002d44:	2300      	movs	r3, #0
 8002d46:	4604      	mov	r4, r0
 8002d48:	4608      	mov	r0, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	602b      	str	r3, [r5, #0]
 8002d4e:	f000 f93e 	bl	8002fce <_fstat>
 8002d52:	1c43      	adds	r3, r0, #1
 8002d54:	d102      	bne.n	8002d5c <_fstat_r+0x1c>
 8002d56:	682b      	ldr	r3, [r5, #0]
 8002d58:	b103      	cbz	r3, 8002d5c <_fstat_r+0x1c>
 8002d5a:	6023      	str	r3, [r4, #0]
 8002d5c:	bd38      	pop	{r3, r4, r5, pc}
 8002d5e:	bf00      	nop
 8002d60:	200009a8 	.word	0x200009a8

08002d64 <_isatty_r>:
 8002d64:	b538      	push	{r3, r4, r5, lr}
 8002d66:	4d06      	ldr	r5, [pc, #24]	; (8002d80 <_isatty_r+0x1c>)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	602b      	str	r3, [r5, #0]
 8002d70:	f000 fa92 	bl	8003298 <_isatty>
 8002d74:	1c43      	adds	r3, r0, #1
 8002d76:	d102      	bne.n	8002d7e <_isatty_r+0x1a>
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	b103      	cbz	r3, 8002d7e <_isatty_r+0x1a>
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	bd38      	pop	{r3, r4, r5, pc}
 8002d80:	200009a8 	.word	0x200009a8

08002d84 <findslot>:
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <findslot+0x2c>)
 8002d86:	b510      	push	{r4, lr}
 8002d88:	4604      	mov	r4, r0
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	b118      	cbz	r0, 8002d96 <findslot+0x12>
 8002d8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002d90:	b90b      	cbnz	r3, 8002d96 <findslot+0x12>
 8002d92:	f7fe fe47 	bl	8001a24 <__sinit>
 8002d96:	2c13      	cmp	r4, #19
 8002d98:	d807      	bhi.n	8002daa <findslot+0x26>
 8002d9a:	4806      	ldr	r0, [pc, #24]	; (8002db4 <findslot+0x30>)
 8002d9c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002da0:	3201      	adds	r2, #1
 8002da2:	d002      	beq.n	8002daa <findslot+0x26>
 8002da4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	2000      	movs	r0, #0
 8002dac:	e7fc      	b.n	8002da8 <findslot+0x24>
 8002dae:	bf00      	nop
 8002db0:	20000014 	.word	0x20000014
 8002db4:	200008d4 	.word	0x200008d4

08002db8 <checkerror>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	1c43      	adds	r3, r0, #1
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	d109      	bne.n	8002dd4 <checkerror+0x1c>
 8002dc0:	f7fe fd5a 	bl	8001878 <__errno>
 8002dc4:	2613      	movs	r6, #19
 8002dc6:	4605      	mov	r5, r0
 8002dc8:	2700      	movs	r7, #0
 8002dca:	4630      	mov	r0, r6
 8002dcc:	4639      	mov	r1, r7
 8002dce:	beab      	bkpt	0x00ab
 8002dd0:	4606      	mov	r6, r0
 8002dd2:	602e      	str	r6, [r5, #0]
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002dd8 <error>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	4604      	mov	r4, r0
 8002ddc:	f7fe fd4c 	bl	8001878 <__errno>
 8002de0:	2613      	movs	r6, #19
 8002de2:	4605      	mov	r5, r0
 8002de4:	2700      	movs	r7, #0
 8002de6:	4630      	mov	r0, r6
 8002de8:	4639      	mov	r1, r7
 8002dea:	beab      	bkpt	0x00ab
 8002dec:	4606      	mov	r6, r0
 8002dee:	602e      	str	r6, [r5, #0]
 8002df0:	4620      	mov	r0, r4
 8002df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002df4 <_swiread>:
 8002df4:	b530      	push	{r4, r5, lr}
 8002df6:	b085      	sub	sp, #20
 8002df8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002dfc:	9203      	str	r2, [sp, #12]
 8002dfe:	2406      	movs	r4, #6
 8002e00:	ad01      	add	r5, sp, #4
 8002e02:	4620      	mov	r0, r4
 8002e04:	4629      	mov	r1, r5
 8002e06:	beab      	bkpt	0x00ab
 8002e08:	4604      	mov	r4, r0
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7ff ffd4 	bl	8002db8 <checkerror>
 8002e10:	b005      	add	sp, #20
 8002e12:	bd30      	pop	{r4, r5, pc}

08002e14 <_read>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	460e      	mov	r6, r1
 8002e18:	4615      	mov	r5, r2
 8002e1a:	f7ff ffb3 	bl	8002d84 <findslot>
 8002e1e:	4604      	mov	r4, r0
 8002e20:	b930      	cbnz	r0, 8002e30 <_read+0x1c>
 8002e22:	f7fe fd29 	bl	8001878 <__errno>
 8002e26:	2309      	movs	r3, #9
 8002e28:	6003      	str	r3, [r0, #0]
 8002e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}
 8002e30:	6800      	ldr	r0, [r0, #0]
 8002e32:	462a      	mov	r2, r5
 8002e34:	4631      	mov	r1, r6
 8002e36:	f7ff ffdd 	bl	8002df4 <_swiread>
 8002e3a:	1c43      	adds	r3, r0, #1
 8002e3c:	bf1f      	itttt	ne
 8002e3e:	6863      	ldrne	r3, [r4, #4]
 8002e40:	1a28      	subne	r0, r5, r0
 8002e42:	181b      	addne	r3, r3, r0
 8002e44:	6063      	strne	r3, [r4, #4]
 8002e46:	e7f2      	b.n	8002e2e <_read+0x1a>

08002e48 <_swilseek>:
 8002e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	4616      	mov	r6, r2
 8002e4e:	f7ff ff99 	bl	8002d84 <findslot>
 8002e52:	4605      	mov	r5, r0
 8002e54:	b940      	cbnz	r0, 8002e68 <_swilseek+0x20>
 8002e56:	f7fe fd0f 	bl	8001878 <__errno>
 8002e5a:	2309      	movs	r3, #9
 8002e5c:	6003      	str	r3, [r0, #0]
 8002e5e:	f04f 34ff 	mov.w	r4, #4294967295
 8002e62:	4620      	mov	r0, r4
 8002e64:	b003      	add	sp, #12
 8002e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e68:	2e02      	cmp	r6, #2
 8002e6a:	d903      	bls.n	8002e74 <_swilseek+0x2c>
 8002e6c:	f7fe fd04 	bl	8001878 <__errno>
 8002e70:	2316      	movs	r3, #22
 8002e72:	e7f3      	b.n	8002e5c <_swilseek+0x14>
 8002e74:	2e01      	cmp	r6, #1
 8002e76:	d112      	bne.n	8002e9e <_swilseek+0x56>
 8002e78:	6843      	ldr	r3, [r0, #4]
 8002e7a:	18e4      	adds	r4, r4, r3
 8002e7c:	d4f6      	bmi.n	8002e6c <_swilseek+0x24>
 8002e7e:	682b      	ldr	r3, [r5, #0]
 8002e80:	260a      	movs	r6, #10
 8002e82:	e9cd 3400 	strd	r3, r4, [sp]
 8002e86:	466f      	mov	r7, sp
 8002e88:	4630      	mov	r0, r6
 8002e8a:	4639      	mov	r1, r7
 8002e8c:	beab      	bkpt	0x00ab
 8002e8e:	4606      	mov	r6, r0
 8002e90:	4630      	mov	r0, r6
 8002e92:	f7ff ff91 	bl	8002db8 <checkerror>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	dbe1      	blt.n	8002e5e <_swilseek+0x16>
 8002e9a:	606c      	str	r4, [r5, #4]
 8002e9c:	e7e1      	b.n	8002e62 <_swilseek+0x1a>
 8002e9e:	2e02      	cmp	r6, #2
 8002ea0:	d1ed      	bne.n	8002e7e <_swilseek+0x36>
 8002ea2:	6803      	ldr	r3, [r0, #0]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	260c      	movs	r6, #12
 8002ea8:	466f      	mov	r7, sp
 8002eaa:	4630      	mov	r0, r6
 8002eac:	4639      	mov	r1, r7
 8002eae:	beab      	bkpt	0x00ab
 8002eb0:	4606      	mov	r6, r0
 8002eb2:	4630      	mov	r0, r6
 8002eb4:	f7ff ff80 	bl	8002db8 <checkerror>
 8002eb8:	1c43      	adds	r3, r0, #1
 8002eba:	d0d0      	beq.n	8002e5e <_swilseek+0x16>
 8002ebc:	4404      	add	r4, r0
 8002ebe:	e7de      	b.n	8002e7e <_swilseek+0x36>

08002ec0 <_lseek>:
 8002ec0:	f7ff bfc2 	b.w	8002e48 <_swilseek>

08002ec4 <_swiwrite>:
 8002ec4:	b530      	push	{r4, r5, lr}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002ecc:	9203      	str	r2, [sp, #12]
 8002ece:	2405      	movs	r4, #5
 8002ed0:	ad01      	add	r5, sp, #4
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	beab      	bkpt	0x00ab
 8002ed8:	4604      	mov	r4, r0
 8002eda:	4620      	mov	r0, r4
 8002edc:	f7ff ff6c 	bl	8002db8 <checkerror>
 8002ee0:	b005      	add	sp, #20
 8002ee2:	bd30      	pop	{r4, r5, pc}

08002ee4 <_write>:
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	460e      	mov	r6, r1
 8002ee8:	4615      	mov	r5, r2
 8002eea:	f7ff ff4b 	bl	8002d84 <findslot>
 8002eee:	4604      	mov	r4, r0
 8002ef0:	b930      	cbnz	r0, 8002f00 <_write+0x1c>
 8002ef2:	f7fe fcc1 	bl	8001878 <__errno>
 8002ef6:	2309      	movs	r3, #9
 8002ef8:	6003      	str	r3, [r0, #0]
 8002efa:	f04f 30ff 	mov.w	r0, #4294967295
 8002efe:	bd70      	pop	{r4, r5, r6, pc}
 8002f00:	6800      	ldr	r0, [r0, #0]
 8002f02:	462a      	mov	r2, r5
 8002f04:	4631      	mov	r1, r6
 8002f06:	f7ff ffdd 	bl	8002ec4 <_swiwrite>
 8002f0a:	1e03      	subs	r3, r0, #0
 8002f0c:	dbf5      	blt.n	8002efa <_write+0x16>
 8002f0e:	6862      	ldr	r2, [r4, #4]
 8002f10:	1ae8      	subs	r0, r5, r3
 8002f12:	4402      	add	r2, r0
 8002f14:	42ab      	cmp	r3, r5
 8002f16:	6062      	str	r2, [r4, #4]
 8002f18:	d1f1      	bne.n	8002efe <_write+0x1a>
 8002f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7ff bf5a 	b.w	8002dd8 <error>

08002f24 <_swiclose>:
 8002f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f26:	2402      	movs	r4, #2
 8002f28:	9001      	str	r0, [sp, #4]
 8002f2a:	ad01      	add	r5, sp, #4
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	4629      	mov	r1, r5
 8002f30:	beab      	bkpt	0x00ab
 8002f32:	4604      	mov	r4, r0
 8002f34:	4620      	mov	r0, r4
 8002f36:	f7ff ff3f 	bl	8002db8 <checkerror>
 8002f3a:	b003      	add	sp, #12
 8002f3c:	bd30      	pop	{r4, r5, pc}
	...

08002f40 <_close>:
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4605      	mov	r5, r0
 8002f44:	f7ff ff1e 	bl	8002d84 <findslot>
 8002f48:	4604      	mov	r4, r0
 8002f4a:	b930      	cbnz	r0, 8002f5a <_close+0x1a>
 8002f4c:	f7fe fc94 	bl	8001878 <__errno>
 8002f50:	2309      	movs	r3, #9
 8002f52:	6003      	str	r3, [r0, #0]
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	bd38      	pop	{r3, r4, r5, pc}
 8002f5a:	3d01      	subs	r5, #1
 8002f5c:	2d01      	cmp	r5, #1
 8002f5e:	d809      	bhi.n	8002f74 <_close+0x34>
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <_close+0x48>)
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d104      	bne.n	8002f74 <_close+0x34>
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	6003      	str	r3, [r0, #0]
 8002f70:	2000      	movs	r0, #0
 8002f72:	e7f1      	b.n	8002f58 <_close+0x18>
 8002f74:	6820      	ldr	r0, [r4, #0]
 8002f76:	f7ff ffd5 	bl	8002f24 <_swiclose>
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d1ec      	bne.n	8002f58 <_close+0x18>
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	6023      	str	r3, [r4, #0]
 8002f84:	e7e8      	b.n	8002f58 <_close+0x18>
 8002f86:	bf00      	nop
 8002f88:	200008d4 	.word	0x200008d4

08002f8c <_swistat>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	460c      	mov	r4, r1
 8002f90:	f7ff fef8 	bl	8002d84 <findslot>
 8002f94:	4605      	mov	r5, r0
 8002f96:	b930      	cbnz	r0, 8002fa6 <_swistat+0x1a>
 8002f98:	f7fe fc6e 	bl	8001878 <__errno>
 8002f9c:	2309      	movs	r3, #9
 8002f9e:	6003      	str	r3, [r0, #0]
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}
 8002fa6:	6863      	ldr	r3, [r4, #4]
 8002fa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fac:	6063      	str	r3, [r4, #4]
 8002fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb2:	64a3      	str	r3, [r4, #72]	; 0x48
 8002fb4:	260c      	movs	r6, #12
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	4629      	mov	r1, r5
 8002fba:	beab      	bkpt	0x00ab
 8002fbc:	4605      	mov	r5, r0
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	f7ff fefa 	bl	8002db8 <checkerror>
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	bf1c      	itt	ne
 8002fc8:	6120      	strne	r0, [r4, #16]
 8002fca:	2000      	movne	r0, #0
 8002fcc:	e7ea      	b.n	8002fa4 <_swistat+0x18>

08002fce <_fstat>:
 8002fce:	460b      	mov	r3, r1
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	2258      	movs	r2, #88	; 0x58
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe fc77 	bl	80018cc <memset>
 8002fde:	4601      	mov	r1, r0
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fe6:	f7ff bfd1 	b.w	8002f8c <_swistat>

08002fea <_stat>:
 8002fea:	b538      	push	{r3, r4, r5, lr}
 8002fec:	460d      	mov	r5, r1
 8002fee:	4604      	mov	r4, r0
 8002ff0:	2258      	movs	r2, #88	; 0x58
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	f7fe fc69 	bl	80018cc <memset>
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	f000 f811 	bl	8003024 <_swiopen>
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	4604      	mov	r4, r0
 8003006:	d00b      	beq.n	8003020 <_stat+0x36>
 8003008:	686b      	ldr	r3, [r5, #4]
 800300a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800300e:	606b      	str	r3, [r5, #4]
 8003010:	4629      	mov	r1, r5
 8003012:	f7ff ffbb 	bl	8002f8c <_swistat>
 8003016:	4605      	mov	r5, r0
 8003018:	4620      	mov	r0, r4
 800301a:	f7ff ff91 	bl	8002f40 <_close>
 800301e:	462c      	mov	r4, r5
 8003020:	4620      	mov	r0, r4
 8003022:	bd38      	pop	{r3, r4, r5, pc}

08003024 <_swiopen>:
 8003024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003028:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <_swiopen+0xb0>)
 800302a:	b097      	sub	sp, #92	; 0x5c
 800302c:	4681      	mov	r9, r0
 800302e:	460f      	mov	r7, r1
 8003030:	2500      	movs	r5, #0
 8003032:	461e      	mov	r6, r3
 8003034:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8003038:	1c61      	adds	r1, r4, #1
 800303a:	d037      	beq.n	80030ac <_swiopen+0x88>
 800303c:	3501      	adds	r5, #1
 800303e:	2d14      	cmp	r5, #20
 8003040:	d1f8      	bne.n	8003034 <_swiopen+0x10>
 8003042:	f7fe fc19 	bl	8001878 <__errno>
 8003046:	2318      	movs	r3, #24
 8003048:	6003      	str	r3, [r0, #0]
 800304a:	f04f 34ff 	mov.w	r4, #4294967295
 800304e:	e03d      	b.n	80030cc <_swiopen+0xa8>
 8003050:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8003054:	f240 6301 	movw	r3, #1537	; 0x601
 8003058:	07ba      	lsls	r2, r7, #30
 800305a:	bf48      	it	mi
 800305c:	f044 0402 	orrmi.w	r4, r4, #2
 8003060:	421f      	tst	r7, r3
 8003062:	bf18      	it	ne
 8003064:	f044 0404 	orrne.w	r4, r4, #4
 8003068:	073b      	lsls	r3, r7, #28
 800306a:	bf48      	it	mi
 800306c:	f024 0404 	bicmi.w	r4, r4, #4
 8003070:	4648      	mov	r0, r9
 8003072:	bf48      	it	mi
 8003074:	f044 0408 	orrmi.w	r4, r4, #8
 8003078:	f8cd 9000 	str.w	r9, [sp]
 800307c:	f7fd f8b8 	bl	80001f0 <strlen>
 8003080:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003084:	2401      	movs	r4, #1
 8003086:	4620      	mov	r0, r4
 8003088:	4641      	mov	r1, r8
 800308a:	beab      	bkpt	0x00ab
 800308c:	4604      	mov	r4, r0
 800308e:	2c00      	cmp	r4, #0
 8003090:	db07      	blt.n	80030a2 <_swiopen+0x7e>
 8003092:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8003096:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 800309a:	2300      	movs	r3, #0
 800309c:	6073      	str	r3, [r6, #4]
 800309e:	462c      	mov	r4, r5
 80030a0:	e014      	b.n	80030cc <_swiopen+0xa8>
 80030a2:	4620      	mov	r0, r4
 80030a4:	f7ff fe98 	bl	8002dd8 <error>
 80030a8:	4604      	mov	r4, r0
 80030aa:	e00f      	b.n	80030cc <_swiopen+0xa8>
 80030ac:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 80030b0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80030b4:	46e8      	mov	r8, sp
 80030b6:	d1cb      	bne.n	8003050 <_swiopen+0x2c>
 80030b8:	4641      	mov	r1, r8
 80030ba:	4648      	mov	r0, r9
 80030bc:	f7ff ff95 	bl	8002fea <_stat>
 80030c0:	3001      	adds	r0, #1
 80030c2:	d0c5      	beq.n	8003050 <_swiopen+0x2c>
 80030c4:	f7fe fbd8 	bl	8001878 <__errno>
 80030c8:	2311      	movs	r3, #17
 80030ca:	6003      	str	r3, [r0, #0]
 80030cc:	4620      	mov	r0, r4
 80030ce:	b017      	add	sp, #92	; 0x5c
 80030d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030d4:	200008d4 	.word	0x200008d4

080030d8 <_get_semihosting_exts>:
 80030d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80030dc:	4606      	mov	r6, r0
 80030de:	460f      	mov	r7, r1
 80030e0:	482a      	ldr	r0, [pc, #168]	; (800318c <_get_semihosting_exts+0xb4>)
 80030e2:	2100      	movs	r1, #0
 80030e4:	4615      	mov	r5, r2
 80030e6:	f7ff ff9d 	bl	8003024 <_swiopen>
 80030ea:	462a      	mov	r2, r5
 80030ec:	4604      	mov	r4, r0
 80030ee:	2100      	movs	r1, #0
 80030f0:	4630      	mov	r0, r6
 80030f2:	f7fe fbeb 	bl	80018cc <memset>
 80030f6:	1c63      	adds	r3, r4, #1
 80030f8:	d016      	beq.n	8003128 <_get_semihosting_exts+0x50>
 80030fa:	4620      	mov	r0, r4
 80030fc:	f7ff fe42 	bl	8002d84 <findslot>
 8003100:	f04f 080c 	mov.w	r8, #12
 8003104:	4681      	mov	r9, r0
 8003106:	4640      	mov	r0, r8
 8003108:	4649      	mov	r1, r9
 800310a:	beab      	bkpt	0x00ab
 800310c:	4680      	mov	r8, r0
 800310e:	4640      	mov	r0, r8
 8003110:	f7ff fe52 	bl	8002db8 <checkerror>
 8003114:	2803      	cmp	r0, #3
 8003116:	dd02      	ble.n	800311e <_get_semihosting_exts+0x46>
 8003118:	1ec3      	subs	r3, r0, #3
 800311a:	42ab      	cmp	r3, r5
 800311c:	dc08      	bgt.n	8003130 <_get_semihosting_exts+0x58>
 800311e:	4620      	mov	r0, r4
 8003120:	f7ff ff0e 	bl	8002f40 <_close>
 8003124:	f04f 34ff 	mov.w	r4, #4294967295
 8003128:	4620      	mov	r0, r4
 800312a:	b003      	add	sp, #12
 800312c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003130:	2204      	movs	r2, #4
 8003132:	eb0d 0102 	add.w	r1, sp, r2
 8003136:	4620      	mov	r0, r4
 8003138:	f7ff fe6c 	bl	8002e14 <_read>
 800313c:	2803      	cmp	r0, #3
 800313e:	ddee      	ble.n	800311e <_get_semihosting_exts+0x46>
 8003140:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003144:	2b53      	cmp	r3, #83	; 0x53
 8003146:	d1ea      	bne.n	800311e <_get_semihosting_exts+0x46>
 8003148:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800314c:	2b48      	cmp	r3, #72	; 0x48
 800314e:	d1e6      	bne.n	800311e <_get_semihosting_exts+0x46>
 8003150:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003154:	2b46      	cmp	r3, #70	; 0x46
 8003156:	d1e2      	bne.n	800311e <_get_semihosting_exts+0x46>
 8003158:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800315c:	2b42      	cmp	r3, #66	; 0x42
 800315e:	d1de      	bne.n	800311e <_get_semihosting_exts+0x46>
 8003160:	2201      	movs	r2, #1
 8003162:	4639      	mov	r1, r7
 8003164:	4620      	mov	r0, r4
 8003166:	f7ff fe6f 	bl	8002e48 <_swilseek>
 800316a:	2800      	cmp	r0, #0
 800316c:	dbd7      	blt.n	800311e <_get_semihosting_exts+0x46>
 800316e:	462a      	mov	r2, r5
 8003170:	4631      	mov	r1, r6
 8003172:	4620      	mov	r0, r4
 8003174:	f7ff fe4e 	bl	8002e14 <_read>
 8003178:	4605      	mov	r5, r0
 800317a:	4620      	mov	r0, r4
 800317c:	f7ff fee0 	bl	8002f40 <_close>
 8003180:	4628      	mov	r0, r5
 8003182:	f7ff fe19 	bl	8002db8 <checkerror>
 8003186:	4604      	mov	r4, r0
 8003188:	e7ce      	b.n	8003128 <_get_semihosting_exts+0x50>
 800318a:	bf00      	nop
 800318c:	08003376 	.word	0x08003376

08003190 <initialise_semihosting_exts>:
 8003190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003192:	4d0a      	ldr	r5, [pc, #40]	; (80031bc <initialise_semihosting_exts+0x2c>)
 8003194:	4c0a      	ldr	r4, [pc, #40]	; (80031c0 <initialise_semihosting_exts+0x30>)
 8003196:	2100      	movs	r1, #0
 8003198:	2201      	movs	r2, #1
 800319a:	a801      	add	r0, sp, #4
 800319c:	6029      	str	r1, [r5, #0]
 800319e:	6022      	str	r2, [r4, #0]
 80031a0:	f7ff ff9a 	bl	80030d8 <_get_semihosting_exts>
 80031a4:	2800      	cmp	r0, #0
 80031a6:	dd07      	ble.n	80031b8 <initialise_semihosting_exts+0x28>
 80031a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031ac:	f003 0201 	and.w	r2, r3, #1
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	602a      	str	r2, [r5, #0]
 80031b6:	6023      	str	r3, [r4, #0]
 80031b8:	b003      	add	sp, #12
 80031ba:	bd30      	pop	{r4, r5, pc}
 80031bc:	20000854 	.word	0x20000854
 80031c0:	20000858 	.word	0x20000858

080031c4 <_has_ext_stdout_stderr>:
 80031c4:	b510      	push	{r4, lr}
 80031c6:	4c04      	ldr	r4, [pc, #16]	; (80031d8 <_has_ext_stdout_stderr+0x14>)
 80031c8:	6822      	ldr	r2, [r4, #0]
 80031ca:	2a00      	cmp	r2, #0
 80031cc:	da01      	bge.n	80031d2 <_has_ext_stdout_stderr+0xe>
 80031ce:	f7ff ffdf 	bl	8003190 <initialise_semihosting_exts>
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	bf00      	nop
 80031d8:	20000858 	.word	0x20000858

080031dc <initialise_monitor_handles>:
 80031dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e0:	b085      	sub	sp, #20
 80031e2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003294 <initialise_monitor_handles+0xb8>
 80031e6:	f8cd 9004 	str.w	r9, [sp, #4]
 80031ea:	2303      	movs	r3, #3
 80031ec:	2400      	movs	r4, #0
 80031ee:	9303      	str	r3, [sp, #12]
 80031f0:	f10d 0804 	add.w	r8, sp, #4
 80031f4:	9402      	str	r4, [sp, #8]
 80031f6:	2501      	movs	r5, #1
 80031f8:	4628      	mov	r0, r5
 80031fa:	4641      	mov	r1, r8
 80031fc:	beab      	bkpt	0x00ab
 80031fe:	4605      	mov	r5, r0
 8003200:	4e20      	ldr	r6, [pc, #128]	; (8003284 <initialise_monitor_handles+0xa8>)
 8003202:	4a21      	ldr	r2, [pc, #132]	; (8003288 <initialise_monitor_handles+0xac>)
 8003204:	6035      	str	r5, [r6, #0]
 8003206:	4623      	mov	r3, r4
 8003208:	f04f 31ff 	mov.w	r1, #4294967295
 800320c:	4614      	mov	r4, r2
 800320e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8003212:	3301      	adds	r3, #1
 8003214:	2b14      	cmp	r3, #20
 8003216:	d1fa      	bne.n	800320e <initialise_monitor_handles+0x32>
 8003218:	f7ff ffd4 	bl	80031c4 <_has_ext_stdout_stderr>
 800321c:	4d1b      	ldr	r5, [pc, #108]	; (800328c <initialise_monitor_handles+0xb0>)
 800321e:	b1d0      	cbz	r0, 8003256 <initialise_monitor_handles+0x7a>
 8003220:	f04f 0a03 	mov.w	sl, #3
 8003224:	2304      	movs	r3, #4
 8003226:	f8cd 9004 	str.w	r9, [sp, #4]
 800322a:	2701      	movs	r7, #1
 800322c:	f8cd a00c 	str.w	sl, [sp, #12]
 8003230:	9302      	str	r3, [sp, #8]
 8003232:	4638      	mov	r0, r7
 8003234:	4641      	mov	r1, r8
 8003236:	beab      	bkpt	0x00ab
 8003238:	4683      	mov	fp, r0
 800323a:	4b15      	ldr	r3, [pc, #84]	; (8003290 <initialise_monitor_handles+0xb4>)
 800323c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003240:	f8c3 b000 	str.w	fp, [r3]
 8003244:	2308      	movs	r3, #8
 8003246:	f8cd a00c 	str.w	sl, [sp, #12]
 800324a:	9302      	str	r3, [sp, #8]
 800324c:	4638      	mov	r0, r7
 800324e:	4641      	mov	r1, r8
 8003250:	beab      	bkpt	0x00ab
 8003252:	4607      	mov	r7, r0
 8003254:	602f      	str	r7, [r5, #0]
 8003256:	682b      	ldr	r3, [r5, #0]
 8003258:	3301      	adds	r3, #1
 800325a:	bf02      	ittt	eq
 800325c:	4b0c      	ldreq	r3, [pc, #48]	; (8003290 <initialise_monitor_handles+0xb4>)
 800325e:	681b      	ldreq	r3, [r3, #0]
 8003260:	602b      	streq	r3, [r5, #0]
 8003262:	6833      	ldr	r3, [r6, #0]
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	2600      	movs	r6, #0
 8003268:	6066      	str	r6, [r4, #4]
 800326a:	f7ff ffab 	bl	80031c4 <_has_ext_stdout_stderr>
 800326e:	b130      	cbz	r0, 800327e <initialise_monitor_handles+0xa2>
 8003270:	4b07      	ldr	r3, [pc, #28]	; (8003290 <initialise_monitor_handles+0xb4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003278:	682b      	ldr	r3, [r5, #0]
 800327a:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800327e:	b005      	add	sp, #20
 8003280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003284:	200008cc 	.word	0x200008cc
 8003288:	200008d4 	.word	0x200008d4
 800328c:	200008c8 	.word	0x200008c8
 8003290:	200008d0 	.word	0x200008d0
 8003294:	0800338c 	.word	0x0800338c

08003298 <_isatty>:
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	f7ff fd73 	bl	8002d84 <findslot>
 800329e:	2509      	movs	r5, #9
 80032a0:	4604      	mov	r4, r0
 80032a2:	b920      	cbnz	r0, 80032ae <_isatty+0x16>
 80032a4:	f7fe fae8 	bl	8001878 <__errno>
 80032a8:	6005      	str	r5, [r0, #0]
 80032aa:	4620      	mov	r0, r4
 80032ac:	bd70      	pop	{r4, r5, r6, pc}
 80032ae:	4628      	mov	r0, r5
 80032b0:	4621      	mov	r1, r4
 80032b2:	beab      	bkpt	0x00ab
 80032b4:	4604      	mov	r4, r0
 80032b6:	2c01      	cmp	r4, #1
 80032b8:	d0f7      	beq.n	80032aa <_isatty+0x12>
 80032ba:	f7fe fadd 	bl	8001878 <__errno>
 80032be:	2400      	movs	r4, #0
 80032c0:	4605      	mov	r5, r0
 80032c2:	2613      	movs	r6, #19
 80032c4:	4630      	mov	r0, r6
 80032c6:	4621      	mov	r1, r4
 80032c8:	beab      	bkpt	0x00ab
 80032ca:	4606      	mov	r6, r0
 80032cc:	602e      	str	r6, [r5, #0]
 80032ce:	e7ec      	b.n	80032aa <_isatty+0x12>

080032d0 <_init>:
 80032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d2:	bf00      	nop
 80032d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d6:	bc08      	pop	{r3}
 80032d8:	469e      	mov	lr, r3
 80032da:	4770      	bx	lr

080032dc <_fini>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	bf00      	nop
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr
